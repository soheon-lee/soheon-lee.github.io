{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog-20200211-WebScraping-Python/","result":{"data":{"cur":{"id":"f042f14b-3a25-54ce-a22d-ac9e63bd5973","html":"<p>파이썬 라이브러리를 활용해서 간단한 웹 페이지 스크래핑을 해보자.</p>\n<h2 id=\"0-웹-크롤링-web-scraping\" style=\"position:relative;\"><a href=\"#0-%EC%9B%B9-%ED%81%AC%EB%A1%A4%EB%A7%81-web-scraping\" aria-label=\"0 웹 크롤링 web scraping permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0. 웹 크롤링 (Web scraping)</h2>\n<p>먼저, 웹 크롤링이 무엇인지 간단히 짚고 넘어가자. 보다 널리 쓰이는 정식 명칭은 <span style=\"color:orange\"><strong>web scraping</strong></span> 으로, 웹 사이트에서 원하는 정보를 추출하는 것을 말한다.<br>\n엄청난 분량의 웹 문서를 사람이 일일이 모으는 일이 거의 불가능하기에 이를 자동으로 해주는 작업이다. 이런 프로그램</span>을 <strong>웹 크롤러</strong> 라고 한다.</p>\n<ul>\n<li>Billboard chart 200</li>\n<li>Netflix FAQ list</li>\n</ul>\n<p>두 페이지에서 웹 크롤링을 실습해보려한다. 다시 말해, 두 페이지에서 원하는 정보를 가져오려고 한다.</p>\n<h2 id=\"1-라이브러리-설치--간단-소개\" style=\"position:relative;\"><a href=\"#1-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%84%A4%EC%B9%98--%EA%B0%84%EB%8B%A8-%EC%86%8C%EA%B0%9C\" aria-label=\"1 라이브러리 설치  간단 소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 라이브러리 설치 &#x26; 간단 소개</h2>\n<p><strong><code class=\"language-text\">bs4</code></strong>와 <strong><code class=\"language-text\">sqlalchemy</code></strong>, <strong><code class=\"language-text\">sqlalchemy</code></strong> 세 라이브러리가 필요하다. 혹시 모르니 가상환경 아래에서 설치해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">conda creat -n <span class=\"token string\">\"scrap01\"</span>  <span class=\"token comment\"># 가상환경 생성</span>\nconda activate scrap01    <span class=\"token comment\"># 가상환경 활성화</span>\n\npip <span class=\"token function\">install</span> bs4           <span class=\"token comment\"># bs4 설치</span>\npip <span class=\"token function\">install</span> requests      <span class=\"token comment\"># requests 설치</span>\npip <span class=\"token function\">install</span> sqlalchemy    <span class=\"token comment\"># sqlalchemy 설치</span></code></pre></div>\n<p>각 모듈의 역할을 아주 간단히 기술해보자.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">name</th>\n<th align=\"left\">function</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><strong><span style=\"color:orange\">requests</span></strong></td>\n<td align=\"left\">Python에서 HTTP 요청을 보내는 모듈. 웹에서 정보를 가져오려면, 웹에 요청을 보내고 그 응답을 받아야하니까.</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><span style=\"color:orange\">BeautifulSoup</span></strong></td>\n<td align=\"left\">html에서 데이터를 추출할 때 사용할 모듈.</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><span style=\"color:orange\">sqlalchemy</span></strong></td>\n<td align=\"left\">데이터베이스를 만들어주는 역할.</td>\n</tr>\n</tbody>\n</table>\n<p>두루뭉실해도 이정도로 이해하고 과정을 진행해가며 조금씩 이해 범위를 넓혀보자.</p>\n<h2 id=\"2-웹-기본-정보-가져오기\" style=\"position:relative;\"><a href=\"#2-%EC%9B%B9-%EA%B8%B0%EB%B3%B8-%EC%A0%95%EB%B3%B4-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0\" aria-label=\"2 웹 기본 정보 가져오기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 웹 기본 정보 가져오기</h2>\n<p>먼저 파이썬 파일을 열어서 설치한 라이브러리와 모듈을 불러온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># filename : billboard-scraping.py</span>\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> requests\n\n<span class=\"token keyword\">from</span> bs4            <span class=\"token keyword\">import</span> BeautifulSoup\n<span class=\"token keyword\">from</span> sqlalchemy     <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> sqlalchemy<span class=\"token punctuation\">.</span>sql <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> sqlalchemy<span class=\"token punctuation\">.</span>orm <span class=\"token keyword\">import</span> relationship<span class=\"token punctuation\">,</span> sessionmaker\n<span class=\"token keyword\">from</span> sqlalchemy<span class=\"token punctuation\">.</span>ext<span class=\"token punctuation\">.</span>declarative <span class=\"token keyword\">import</span> declarative_base</code></pre></div>\n<p>큰 어려움 없이 import import import !<br>\n가장 기본적인 정보인 홈페이지 url을 가져오고, 페이지를 구성하는 html을 뽑아내보자.<br>\n빌보드 웹페이지에 접속하여 ‘BILLBOARD 200’ 리스트가 있는 페이지의 url을 알아낸다.</p>\n<blockquote>\n<p>이것이다.<br>\n<strong><a href=\"https://www.billboard.com/charts/billboard-200\">https://www.billboard.com/charts/billboard-200</a></strong></p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">req <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.billboard.com/charts/billboard-200'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># get 해오기</span>\nhtml <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>text\n<span class=\"token comment\"># get 해온 내용의 'text'를 가져온다</span>\nsoup <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">,</span> <span class=\"token string\">'html.parser'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># html 소스를 파이썬으로 불러옴 (parse)</span></code></pre></div>\n<p>이렇게, 기초 작업이 되었다. <strong><span style=\"color:green\">soup</span></strong>이라는 변수에 빌보드차트 200 홈페이지를 구성하는 모든 html 구조가 할당되어있다. 이 가운데 우리가 원하는 요소를 콕 집어서 가져올 것이다.</p>\n<h2 id=\"3-원하는-요소정보-가져오기\" style=\"position:relative;\"><a href=\"#3-%EC%9B%90%ED%95%98%EB%8A%94-%EC%9A%94%EC%86%8C%EC%A0%95%EB%B3%B4-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0\" aria-label=\"3 원하는 요소정보 가져오기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 원하는 요소(정보) 가져오기</h2>\n<p>빌보드 차트에서 내가 원하는 자료는 아래 네가지다.</p>\n<ol>\n<li>순위</li>\n<li>곡 이름</li>\n<li>가수 이름</li>\n</ol>\n<p>먼저 빌보드 웹페이지 개발자도구에서, 내가 원하는 자료의 요소(element)를 택한다.<br>\n<strong>개발자 도구 > 요소 선택 > 태그 우클릭 > copy > copy selector</strong></p>\n<p><img src=\"./image/IMG_0490.jpg\" alt=\"개발자도구-요소선택\"></p>\n<p>복사한 정보는 아래.\n<code class=\"language-text\">#charts > div > div.chart-list.container > ol > li:nth-child(1) > button > span.chart-element__information > span.chart-element__information__song.text--truncate.color--primary</code><br>\n이렇게나 길다니<br>\n이 정보를 아래 코드 안에 argument로 넘겨줄 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">rank            <span class=\"token operator\">=</span> soup<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 순위</span>\nsong            <span class=\"token operator\">=</span> soup<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 곡 이름</span>\nsinger          <span class=\"token operator\">=</span> soup<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 가수 이름</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">song <span class=\"token operator\">=</span> soup<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span><span class=\"token string\">'#charts > div > div.chart-list.container > ol > li:nth-child(1) > button > span.chart-element__information > span.chart-element__information__song.text--truncate.color--primary'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>확인할 겸 프린트를 해본다 (<code class=\"language-text\">print(song)</code>). 결과는 아래.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>span <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"chart-element__information__song text--truncate color--primary\"</span><span class=\"token operator\">></span>Please Excuse Me For Being Antisocial<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>우선 리스트가 도출되었다는 것을 알 수 있다. 당황스러운 결과가 표시되긴 하지만, 노래 제목인 <strong>Please Excuse Me For Being Antisocial</strong>이 보이니 반갑다.<br>\n당황스러운 결과에서 우리가 원하는 ‘text’만 가져와야한다. song이 리스트인 것을 다시 한 번 인식하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">song<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text</code></pre></div>\n<p>결과는 ?<br>\n<span style=\"background-color:pink\">Please Excuse Me For Being Antisocial </span><br>\nOh Yeah 😻 노래 이름이 별로 마음에 들진 않지만 어쨌든 1위곡이다. 그런데 우리가 필요한 것은 1위곡 뿐만 아니라, 차트 200에 올라있는 모든 곡의 이름이다. 여기서 우리가 복사해 온 셀렉터의 이름을 다시 한 번 보자.<br>\n<span style=\"background-color:lightgray\">#charts > div > div.chart-list.container > ol > </span><span style=\"background-color:orange\">li:nth-child(1)</span><span style=\"background-color:lightgray\"> > button > span.chart-element__information > span.chart-element__information__song.text—truncate.color—primary’</span></p>\n<p>의심스러운 친구를 발견한다. <span style=\"background-color:orange\">li:nth-child(1)</span>로 리스트 하나만 선택한 것이다. 리스트 내부에 모든 요소를 선택하려면<span style=\"background-color:orange\"> li </span>로 바꾸면 된다.<br>\nrank와 singer도 같은 방법으로 가져온다.</p>\n<details markdown=\"1\">\n<summary>&#127774; 지금 까지 코드</summary>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">  <span class=\"token keyword\">import</span> sys\n  <span class=\"token keyword\">import</span> requests\n\n  <span class=\"token keyword\">from</span> bs4            <span class=\"token keyword\">import</span> BeautifulSoup\n  <span class=\"token keyword\">from</span> sqlalchemy     <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n  <span class=\"token keyword\">from</span> sqlalchemy<span class=\"token punctuation\">.</span>sql <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n  <span class=\"token keyword\">from</span> sqlalchemy<span class=\"token punctuation\">.</span>orm <span class=\"token keyword\">import</span> relationship<span class=\"token punctuation\">,</span> sessionmaker\n  <span class=\"token keyword\">from</span> sqlalchemy<span class=\"token punctuation\">.</span>ext<span class=\"token punctuation\">.</span>declarative <span class=\"token keyword\">import</span> declarative_base\n\n  req <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.billboard.com/charts/billboard-200'</span><span class=\"token punctuation\">)</span>\n  html <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>text\n  soup <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">,</span> <span class=\"token string\">'html.parser'</span><span class=\"token punctuation\">)</span>\n\n  rank    <span class=\"token operator\">=</span> soup<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span><span class=\"token string\">'#charts > div > div.chart-list.container > ol > li > button > span.chart-element__rank.flex--column.flex--xy-center.flex--no-shrink > span.chart-element__rank__number'</span><span class=\"token punctuation\">)</span>\n  song    <span class=\"token operator\">=</span> soup<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span><span class=\"token string\">'#charts > div > div.chart-list.container > ol > li > button > span.chart-element__information > span.chart-element__information__song.text--truncate.color--primary'</span><span class=\"token punctuation\">)</span>\n  singer  <span class=\"token operator\">=</span> soup<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span><span class=\"token string\">'#charts > div > div.chart-list.container > ol > li > button > span.chart-element__information > span.chart-element__information__artist.text--truncate.color--secondary'</span><span class=\"token punctuation\">)</span></code></pre></div>\n</details>\n<h2 id=\"4-저장할-데이터-베이스-살펴보기\" style=\"position:relative;\"><a href=\"#4-%EC%A0%80%EC%9E%A5%ED%95%A0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"4 저장할 데이터 베이스 살펴보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 저장할 데이터 베이스 살펴보기</h2>\n<p>html 코드에서 자료를 콕 집어 가져왔다면, 그 자료를 따로 저장할 데이터베이스가 필요하다. 보통, 자료를 가져오기 전에 먼저 모델(표)을 만들어둔다. 해야할 일을 아래와 같다.</p>\n<ol>\n<li>저장할 데이터베이스와 내부 표(모델) 만들기</li>\n<li>뽑아온 자료 표에 저장하기 (rank song singer)</li>\n</ol>\n<h4 id=\"4-1-데이터베이스-만들기\" style=\"position:relative;\"><a href=\"#4-1-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"4 1 데이터베이스 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4-1. 데이터베이스 만들기</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">engine <span class=\"token operator\">=</span> create_engine<span class=\"token punctuation\">(</span><span class=\"token string\">'sqlite:///billboard_chart_200.db'</span><span class=\"token punctuation\">)</span>\nBase   <span class=\"token operator\">=</span> declarative_base<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Music</span><span class=\"token punctuation\">(</span>Base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  __tablename__ <span class=\"token operator\">=</span> <span class=\"token string\">'musics'</span>\n  <span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">,</span> primary_key<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n  rank <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  song <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  singer <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nMusic<span class=\"token punctuation\">.</span>__table__<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>bind<span class=\"token operator\">=</span>engine<span class=\"token punctuation\">,</span> checkfirst<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\nSession <span class=\"token operator\">=</span> sessionmaker<span class=\"token punctuation\">(</span>bind<span class=\"token operator\">=</span>engine<span class=\"token punctuation\">)</span>\nsession <span class=\"token operator\">=</span> Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>실행하면 디렉토리 안에 billboard<em>chart</em>200.db 라는 데이터베이스가 만들어진다. 거기에 저장할 Music이라는 테이블을 생성하였다. 클래스 형태로 만들고, 그 내부 속성으로 우리가 넣고싶은 정보의 이름을 넣는다. 이 이름이 컬럼의 이름이 될 것이다.<br>\n아래 세 줄은 우선은 그냥 따라했음.</p>\n<h4 id=\"4-2-저장하기\" style=\"position:relative;\"><a href=\"#4-2-%EC%A0%80%EC%9E%A5%ED%95%98%EA%B8%B0\" aria-label=\"4 2 저장하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4-2. 저장하기</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">music_chart <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">,</span> song<span class=\"token punctuation\">,</span> singer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  music_chart<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'rank'</span>  <span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'song'</span>  <span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'singer'</span><span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> element <span class=\"token keyword\">in</span> music_chart<span class=\"token punctuation\">:</span>\n  result <span class=\"token operator\">=</span> Music<span class=\"token punctuation\">(</span>\n    rank <span class=\"token operator\">=</span> element<span class=\"token punctuation\">[</span><span class=\"token string\">'rank'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    song <span class=\"token operator\">=</span> element<span class=\"token punctuation\">[</span><span class=\"token string\">'song'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    singer <span class=\"token operator\">=</span> element<span class=\"token punctuation\">[</span><span class=\"token string\">'singer'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span>\n  session<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n  session<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nrequest <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span>Music<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> request<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">,</span><span class=\"token string\">'|'</span><span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">.</span>song<span class=\"token punctuation\">,</span><span class=\"token string\">'|'</span> <span class=\"token punctuation\">,</span>row<span class=\"token punctuation\">.</span>singer<span class=\"token punctuation\">)</span></code></pre></div>\n<p>끝! 디렉토리를 보면</p>\n<blockquote>\n<p>billboard-scraping.py<br>\nbillboard<em>chart</em>200.db</p>\n</blockquote>\n<p>두 파일이 포함되어 있고, billboard<em>chart</em>200.db에는 내 musics 표가 저장되있다. 확인하는 방법은 아래.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">sqlite3 billboard_chart_200.db</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"mysql\"><pre class=\"language-mysql\"><code class=\"language-mysql\">&gt;&gt;&gt; .tables\n&gt;&gt;&gt; select * from musics;</code></pre></div>\n<hr>\n<h3 id=\"netflix-faq-크롤링하기\" style=\"position:relative;\"><a href=\"#netflix-faq-%ED%81%AC%EB%A1%A4%EB%A7%81%ED%95%98%EA%B8%B0\" aria-label=\"netflix faq 크롤링하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Netflix FAQ 크롤링하기</h3>\n<details markdown=\"1\">\n  <summary>&#127774; Netflix FAQ scraping code</summary>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">from</span> bs4 <span class=\"token keyword\">import</span> BeautifulSoup\n\n<span class=\"token keyword\">from</span> sqlalchemy <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\n<span class=\"token keyword\">from</span> sqlalchemy<span class=\"token punctuation\">.</span>ext<span class=\"token punctuation\">.</span>declarative <span class=\"token keyword\">import</span> declarative_base\n<span class=\"token keyword\">from</span> sqlalchemy<span class=\"token punctuation\">.</span>orm <span class=\"token keyword\">import</span> relationship<span class=\"token punctuation\">,</span> sessionmaker\n<span class=\"token keyword\">from</span> sqlalchemy<span class=\"token punctuation\">.</span>sql <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>\ne <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>exit\n\nengine <span class=\"token operator\">=</span> create_engine<span class=\"token punctuation\">(</span><span class=\"token string\">'sqlite:///netflix.db'</span><span class=\"token punctuation\">)</span>\nBase <span class=\"token operator\">=</span> declarative_base<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FAQ</span><span class=\"token punctuation\">(</span>Base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    __tablename__ <span class=\"token operator\">=</span> <span class=\"token string\">'FAQs'</span>\n    <span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">,</span> primary_key<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    question <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nFAQ<span class=\"token punctuation\">.</span>__table__<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>bind<span class=\"token operator\">=</span>engine<span class=\"token punctuation\">,</span> checkfirst<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\nSession <span class=\"token operator\">=</span> sessionmaker<span class=\"token punctuation\">(</span>bind<span class=\"token operator\">=</span>engine<span class=\"token punctuation\">)</span>\nsession <span class=\"token operator\">=</span> Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nreq <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'https://www.netflix.com/kr/'</span>\n<span class=\"token punctuation\">)</span>\nhtml <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>text\nsoup <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">,</span> <span class=\"token string\">'html.parser'</span><span class=\"token punctuation\">)</span>\n\nfaq <span class=\"token operator\">=</span> soup<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'#faq > div.our-story-card-text > ul > li > button'</span>\n<span class=\"token punctuation\">)</span>\n\nFAQ_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> faq<span class=\"token punctuation\">:</span>\n    FAQ_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'question'</span> <span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>text\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> element <span class=\"token keyword\">in</span> FAQ_list<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'question : '</span><span class=\"token punctuation\">,</span>element<span class=\"token punctuation\">[</span><span class=\"token string\">'question'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    result <span class=\"token operator\">=</span> FAQ<span class=\"token punctuation\">(</span>\n        question <span class=\"token operator\">=</span> element<span class=\"token punctuation\">[</span><span class=\"token string\">'question'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    session<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    session<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nrequest <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">(</span>FAQ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> request<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">'|'</span><span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">.</span>song<span class=\"token punctuation\">,</span><span class=\"token string\">'|'</span> <span class=\"token punctuation\">,</span>row<span class=\"token punctuation\">.</span>singer<span class=\"token punctuation\">)</span></code></pre></div>\n</details>\n<details markdown=\"1\">\n  <summary>&#127772; Netflix FAQ 저장 결과</summary>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">sqlite3 netflix.db\n.tables\n<span class=\"token keyword\">select</span> * from FAQs<span class=\"token punctuation\">;</span></code></pre></div>\n<p><img src=\"./image/netflix_faq.png\" alt=\"netflix_db_img\"></p>\n</details>\n<hr>\n<h3 id=\"실패한-페이지-목록\" style=\"position:relative;\"><a href=\"#%EC%8B%A4%ED%8C%A8%ED%95%9C-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%AA%A9%EB%A1%9D\" aria-label=\"실패한 페이지 목록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실패한 페이지 목록</h3>\n<ul>\n<li>skyscanner</li>\n<li>heyjoyce</li>\n<li>official music chart</li>\n<li>wecode</li>\n</ul>\n<p>React로 만들어져 있거나 javascript 렌더링 결과가 표출되는 웹페이지는 지금 상태에선 실행할 수 없다.\n그래서 다운 받은 <strong>SELENIUM</strong> !!\n이걸로 내일 더 FANCY한 웹들을 크롤링 하고 말겠다. 😎</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#0-%EC%9B%B9-%ED%81%AC%EB%A1%A4%EB%A7%81-web-scraping\">0. 웹 크롤링 (Web scraping)</a></li>\n<li><a href=\"#1-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-%EC%84%A4%EC%B9%98--%EA%B0%84%EB%8B%A8-%EC%86%8C%EA%B0%9C\">1. 라이브러리 설치 &#x26; 간단 소개</a></li>\n<li><a href=\"#2-%EC%9B%B9-%EA%B8%B0%EB%B3%B8-%EC%A0%95%EB%B3%B4-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0\">2. 웹 기본 정보 가져오기</a></li>\n<li><a href=\"#3-%EC%9B%90%ED%95%98%EB%8A%94-%EC%9A%94%EC%86%8C%EC%A0%95%EB%B3%B4-%EA%B0%80%EC%A0%B8%EC%98%A4%EA%B8%B0\">3. 원하는 요소(정보) 가져오기</a></li>\n<li>\n<p><a href=\"#4-%EC%A0%80%EC%9E%A5%ED%95%A0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\">4. 저장할 데이터 베이스 살펴보기</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#4-1-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EB%A7%8C%EB%93%A4%EA%B8%B0\">4-1. 데이터베이스 만들기</a></li>\n<li><a href=\"#4-2-%EC%A0%80%EC%9E%A5%ED%95%98%EA%B8%B0\">4-2. 저장하기</a></li>\n</ul>\n</li>\n<li><a href=\"#netflix-faq-%ED%81%AC%EB%A1%A4%EB%A7%81%ED%95%98%EA%B8%B0\">Netflix FAQ 크롤링하기</a></li>\n<li><a href=\"#%EC%8B%A4%ED%8C%A8%ED%95%9C-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%AA%A9%EB%A1%9D\">실패한 페이지 목록</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"파이썬 라이브러리를 활용해서 간단한 웹 페이지 스크래핑을 해보자. 0. 웹 크롤링 (Web scraping) 먼저, 웹 크롤링이 무엇인지 간단히 짚고 넘어가자. 보다 널리 쓰이는 정식 명칭은 web scraping 으로, 웹 사이트에서 원하는 정보를 추출하는 것을 말한다. 엄청난 분량의 웹 문서를 사람이 일일이 모으는 일이 거의 불가능하기에 이를 자동으로 해주는 작업이다. 이런 프로그램을 웹 크롤러 라고 한다. Billboard chart 200 Netflix FAQ list 두 페이지에서 웹 크롤링을 실습해보려한다. 다시 말해, 두 페이지에서 원하는 정보를 가져오려고 한다. 1. 라이브러리 설치 & 간단 소개 와 ,  세 라이브러리가 필요하다. 혹시 모르니 가상환경 아래에서 설치해주었다. 각 모듈의 역할을 아주 간단히 기술해보자. name function requests Python에서 HTTP 요청을 보내는 모듈. 웹에서 정보를 가져오려면, 웹에 요청을 보내고 그 응답을 받아야…","frontmatter":{"date":"February 11, 2020","title":"파이썬으로 웹 스크랩핑 쉽게 하기","categories":"개발블로그","author":"이워크","emoji":"👑"},"fields":{"slug":"/blog-20200211-WebScraping-Python/"}},"next":null,"prev":{"id":"d966eff6-89e9-59de-b7a5-1c82bc703b2a","html":"<p>Django에서는 기본 데이터 베이스로 sqlite3를 제공해준다. setting.py 파일을 보면 sqlite3에 대한 설정을 확인할 수 있다. 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">DATABASES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'default'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'ENGINE'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.db.backends.sqlite3'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>BASE_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'db.sqlite3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>나는 앞으로 MySQL을 사용할 것이기 때문에, 이 기본 정보를 바꾸고 Django-MySQL 조합을 완성하려 한다.</p>\n<hr>\n<h3 id=\"우분투-mysql-설치\" style=\"position:relative;\"><a href=\"#%EC%9A%B0%EB%B6%84%ED%88%AC-mysql-%EC%84%A4%EC%B9%98\" aria-label=\"우분투 mysql 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>우분투 MySQL 설치</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> -y mysql-server\n$ <span class=\"token function\">sudo</span> mysql_secure_installation\n<span class=\"token punctuation\">[</span>NO<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>최고관리자 password<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>Y:익명 사용자 제거<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>N:외부 로그인 허용<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>Y:테스트 데이터베이스 삭제<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>Y:privilege table 다시 로드<span class=\"token punctuation\">]</span></code></pre></div>\n<h3 id=\"환경-구성\" style=\"position:relative;\"><a href=\"#%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1\" aria-label=\"환경 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>환경 구성</h3>\n<p>django가 설치되어 있는 가상환경을 활성화한 뒤, <code class=\"language-text\">mysqlclient</code>를 설치한다. 이 라이브러리를 활용하여 연동할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pip <span class=\"token function\">install</span> mysqlclient</code></pre></div>\n<h5 id=\"우분투에서-mysqlclient-설치시-오류가-발생한다면\" style=\"position:relative;\"><a href=\"#%EC%9A%B0%EB%B6%84%ED%88%AC%EC%97%90%EC%84%9C-mysqlclient-%EC%84%A4%EC%B9%98%EC%8B%9C-%EC%98%A4%EB%A5%98%EA%B0%80-%EB%B0%9C%EC%83%9D%ED%95%9C%EB%8B%A4%EB%A9%B4\" aria-label=\"우분투에서 mysqlclient 설치시 오류가 발생한다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>우분투에서 mysqlclient 설치시 오류가 발생한다면,</h5>\n<p style=\"background-color:pink; padding:5px\">Command \"python setup.py egg_info\" failed with error code 1 in /tmp/pip-install-zbw18e9_/mysqlclient/  </p>\n<p>이런 에러.<br>\n또는,</p>\n<p style=\"background-color:pink; padding:5px\">/bin/sh: 1: mysql_config: not found  </p>\n<p>이런 에러.<br>\n이때,</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> libmysqlclient-dev</code></pre></div>\n<p>다시</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> mysqlclient</code></pre></div>\n<h3 id=\"mysql에-데이터베이스-생성\" style=\"position:relative;\"><a href=\"#mysql%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%83%9D%EC%84%B1\" aria-label=\"mysql에 데이터베이스 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MySQL에 데이터베이스 생성</h3>\n<p>현재 프로젝트에서 이용할 데이터베이스를 MySQL 내부에 만들어주자. starbucks 라는 데이터 베이스를 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> starbucks <span class=\"token keyword\">character</span> <span class=\"token keyword\">set</span> utf8mb4 <span class=\"token keyword\">collate</span> utf8mb4_general_ci<span class=\"token punctuation\">;</span>\nQuery OK<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token keyword\">row</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.01</span> sec<span class=\"token punctuation\">)</span></code></pre></div>\n<p>character set utf8mb4 - 한글 사용 활성화</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">use</span> starbucks\n<span class=\"token keyword\">Database</span> changed\nmysql<span class=\"token operator\">></span> <span class=\"token keyword\">show</span> <span class=\"token keyword\">tables</span><span class=\"token punctuation\">;</span>\nEmpty <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span></code></pre></div>\n<p>지금은 아무 테이블도 없지만, 앞으로 이것 저것 넣으면 된다.</p>\n<h5 id=\"-데이터베이스-삭제하려면\" style=\"position:relative;\"><a href=\"#-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%82%AD%EC%A0%9C%ED%95%98%EB%A0%A4%EB%A9%B4\" aria-label=\" 데이터베이스 삭제하려면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❔ 데이터베이스 삭제하려면</h5>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">DROP DATABASE &lt;database_name></code></pre></div>\n<h3 id=\"django-mysql-연동\" style=\"position:relative;\"><a href=\"#django-mysql-%EC%97%B0%EB%8F%99\" aria-label=\"django mysql 연동 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django-MySQL 연동</h3>\n<p>여태 settings.py에 모든 정보를 몰아서 저장했지만, 지금부터는 my_settings.py라는 새로운 파일에 민감한 정보들을 따로 저장해두고, settings.py에서 import 해서 사용할 것이다.</p>\n<blockquote>\n<p class=\"quote\" style=\"max-width: 100%; padding:10px; border-left:solid 3px gray; text-align:left\"> my_settings.py 파일은 외부와 공유할 일이 없는 정보이기 때문에 .gitignore이라는 숨김 파일에 이름을 등록하여 github에 업로드 되지 않도록 만들어야 한다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> my_settings.py</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">DATABASES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'default'</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'ENGINE'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.db.backends.mysql'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'starbucks'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'USER'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'PASSWORD'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'HOST'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'PORT'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3306'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">my_settings.py</code>파일이 완성되었다. 그럼 진짜 <code class=\"language-text\">setting.py</code>파일에서 import하러 가자!</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> settings.py</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> my_settings\n\nDATABASES <span class=\"token operator\">=</span> my_settings<span class=\"token punctuation\">.</span>DATABASES</code></pre></div>\n<p>모든 설정을 수정하였다면 데이터베이스에 테이블을 만들어줘야한다. <code class=\"language-text\">./manage.py migrate</code></p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">use</span> starbucks\nmysql<span class=\"token operator\">></span> <span class=\"token keyword\">show</span> <span class=\"token keyword\">tables</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">장고_어쩌구</code> 세 테이블과, 내가 starbucks_menu.models에 만들어 둔 클래스에 해당하는 표들이 보인다.</p>\n<hr>\n<p>이제 쓰면 된다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%9A%B0%EB%B6%84%ED%88%AC-mysql-%EC%84%A4%EC%B9%98\">우분투 MySQL 설치</a></li>\n<li>\n<p><a href=\"#%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1\">환경 구성</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%EC%9A%B0%EB%B6%84%ED%88%AC%EC%97%90%EC%84%9C-mysqlclient-%EC%84%A4%EC%B9%98%EC%8B%9C-%EC%98%A4%EB%A5%98%EA%B0%80-%EB%B0%9C%EC%83%9D%ED%95%9C%EB%8B%A4%EB%A9%B4\">우분투에서 mysqlclient 설치시 오류가 발생한다면,</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#mysql%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%83%9D%EC%84%B1\">MySQL에 데이터베이스 생성</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%82%AD%EC%A0%9C%ED%95%98%EB%A0%A4%EB%A9%B4\">❔ 데이터베이스 삭제하려면</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#django-mysql-%EC%97%B0%EB%8F%99\">Django-MySQL 연동</a></li>\n</ul>\n</div>","frontmatter":{"date":"February 17, 2020","title":"Django에 MySQL 연결하여 데이터 저장하기","categories":"개발블로그","author":"이소헌","emoji":"👑"},"fields":{"slug":"/blog-20200217-Django-Connect-MySQL/"}},"site":{"siteMetadata":{"siteUrl":"https://www.zoomkoding.com","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/blog-20200211-WebScraping-Python/","nextSlug":"","prevSlug":"/blog-20200217-Django-Connect-MySQL/"}},"staticQueryHashes":["1073350324","2938748437"]}