{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog-20200217-Django-Connect-MySQL/","result":{"data":{"cur":{"id":"d966eff6-89e9-59de-b7a5-1c82bc703b2a","html":"<p>Django에서는 기본 데이터 베이스로 sqlite3를 제공해준다. setting.py 파일을 보면 sqlite3에 대한 설정을 확인할 수 있다. 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">DATABASES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'default'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'ENGINE'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.db.backends.sqlite3'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>BASE_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'db.sqlite3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>나는 앞으로 MySQL을 사용할 것이기 때문에, 이 기본 정보를 바꾸고 Django-MySQL 조합을 완성하려 한다.</p>\n<hr>\n<h3 id=\"우분투-mysql-설치\" style=\"position:relative;\"><a href=\"#%EC%9A%B0%EB%B6%84%ED%88%AC-mysql-%EC%84%A4%EC%B9%98\" aria-label=\"우분투 mysql 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>우분투 MySQL 설치</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> -y mysql-server\n$ <span class=\"token function\">sudo</span> mysql_secure_installation\n<span class=\"token punctuation\">[</span>NO<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>최고관리자 password<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>Y:익명 사용자 제거<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>N:외부 로그인 허용<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>Y:테스트 데이터베이스 삭제<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>Y:privilege table 다시 로드<span class=\"token punctuation\">]</span></code></pre></div>\n<h3 id=\"환경-구성\" style=\"position:relative;\"><a href=\"#%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1\" aria-label=\"환경 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>환경 구성</h3>\n<p>django가 설치되어 있는 가상환경을 활성화한 뒤, <code class=\"language-text\">mysqlclient</code>를 설치한다. 이 라이브러리를 활용하여 연동할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pip <span class=\"token function\">install</span> mysqlclient</code></pre></div>\n<h5 id=\"우분투에서-mysqlclient-설치시-오류가-발생한다면\" style=\"position:relative;\"><a href=\"#%EC%9A%B0%EB%B6%84%ED%88%AC%EC%97%90%EC%84%9C-mysqlclient-%EC%84%A4%EC%B9%98%EC%8B%9C-%EC%98%A4%EB%A5%98%EA%B0%80-%EB%B0%9C%EC%83%9D%ED%95%9C%EB%8B%A4%EB%A9%B4\" aria-label=\"우분투에서 mysqlclient 설치시 오류가 발생한다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>우분투에서 mysqlclient 설치시 오류가 발생한다면,</h5>\n<p style=\"background-color:pink; padding:5px\">Command \"python setup.py egg_info\" failed with error code 1 in /tmp/pip-install-zbw18e9_/mysqlclient/  </p>\n<p>이런 에러.<br>\n또는,</p>\n<p style=\"background-color:pink; padding:5px\">/bin/sh: 1: mysql_config: not found  </p>\n<p>이런 에러.<br>\n이때,</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> libmysqlclient-dev</code></pre></div>\n<p>다시</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> mysqlclient</code></pre></div>\n<h3 id=\"mysql에-데이터베이스-생성\" style=\"position:relative;\"><a href=\"#mysql%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%83%9D%EC%84%B1\" aria-label=\"mysql에 데이터베이스 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MySQL에 데이터베이스 생성</h3>\n<p>현재 프로젝트에서 이용할 데이터베이스를 MySQL 내부에 만들어주자. starbucks 라는 데이터 베이스를 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> starbucks <span class=\"token keyword\">character</span> <span class=\"token keyword\">set</span> utf8mb4 <span class=\"token keyword\">collate</span> utf8mb4_general_ci<span class=\"token punctuation\">;</span>\nQuery OK<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token keyword\">row</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.01</span> sec<span class=\"token punctuation\">)</span></code></pre></div>\n<p>character set utf8mb4 - 한글 사용 활성화</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">use</span> starbucks\n<span class=\"token keyword\">Database</span> changed\nmysql<span class=\"token operator\">></span> <span class=\"token keyword\">show</span> <span class=\"token keyword\">tables</span><span class=\"token punctuation\">;</span>\nEmpty <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span></code></pre></div>\n<p>지금은 아무 테이블도 없지만, 앞으로 이것 저것 넣으면 된다.</p>\n<h5 id=\"-데이터베이스-삭제하려면\" style=\"position:relative;\"><a href=\"#-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%82%AD%EC%A0%9C%ED%95%98%EB%A0%A4%EB%A9%B4\" aria-label=\" 데이터베이스 삭제하려면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❔ 데이터베이스 삭제하려면</h5>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">DROP DATABASE &lt;database_name></code></pre></div>\n<h3 id=\"django-mysql-연동\" style=\"position:relative;\"><a href=\"#django-mysql-%EC%97%B0%EB%8F%99\" aria-label=\"django mysql 연동 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django-MySQL 연동</h3>\n<p>여태 settings.py에 모든 정보를 몰아서 저장했지만, 지금부터는 my_settings.py라는 새로운 파일에 민감한 정보들을 따로 저장해두고, settings.py에서 import 해서 사용할 것이다.</p>\n<blockquote>\n<p class=\"quote\" style=\"max-width: 100%; padding:10px; border-left:solid 3px gray; text-align:left\"> my_settings.py 파일은 외부와 공유할 일이 없는 정보이기 때문에 .gitignore이라는 숨김 파일에 이름을 등록하여 github에 업로드 되지 않도록 만들어야 한다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> my_settings.py</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">DATABASES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'default'</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'ENGINE'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.db.backends.mysql'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'starbucks'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'USER'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'PASSWORD'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'HOST'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'PORT'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3306'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">my_settings.py</code>파일이 완성되었다. 그럼 진짜 <code class=\"language-text\">setting.py</code>파일에서 import하러 가자!</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> settings.py</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> my_settings\n\nDATABASES <span class=\"token operator\">=</span> my_settings<span class=\"token punctuation\">.</span>DATABASES</code></pre></div>\n<p>모든 설정을 수정하였다면 데이터베이스에 테이블을 만들어줘야한다. <code class=\"language-text\">./manage.py migrate</code></p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">use</span> starbucks\nmysql<span class=\"token operator\">></span> <span class=\"token keyword\">show</span> <span class=\"token keyword\">tables</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">장고_어쩌구</code> 세 테이블과, 내가 starbucks_menu.models에 만들어 둔 클래스에 해당하는 표들이 보인다.</p>\n<hr>\n<p>이제 쓰면 된다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%9A%B0%EB%B6%84%ED%88%AC-mysql-%EC%84%A4%EC%B9%98\">우분투 MySQL 설치</a></li>\n<li>\n<p><a href=\"#%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1\">환경 구성</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%EC%9A%B0%EB%B6%84%ED%88%AC%EC%97%90%EC%84%9C-mysqlclient-%EC%84%A4%EC%B9%98%EC%8B%9C-%EC%98%A4%EB%A5%98%EA%B0%80-%EB%B0%9C%EC%83%9D%ED%95%9C%EB%8B%A4%EB%A9%B4\">우분투에서 mysqlclient 설치시 오류가 발생한다면,</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#mysql%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%83%9D%EC%84%B1\">MySQL에 데이터베이스 생성</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%82%AD%EC%A0%9C%ED%95%98%EB%A0%A4%EB%A9%B4\">❔ 데이터베이스 삭제하려면</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#django-mysql-%EC%97%B0%EB%8F%99\">Django-MySQL 연동</a></li>\n</ul>\n</div>","excerpt":"Django에서는 기본 데이터 베이스로 sqlite3를 제공해준다. setting.py 파일을 보면 sqlite3에 대한 설정을 확인할 수 있다. 아래와 같다. 나는 앞으로 MySQL을 사용할 것이기 때문에, 이 기본 정보를 바꾸고 Django-MySQL 조합을 완성하려 한다. 우분투 MySQL 설치 환경 구성 django가 설치되어 있는 가상환경을 활성화한 뒤, 를 설치한다. 이 라이브러리를 활용하여 연동할 것이다. 우분투에서 mysqlclient 설치시 오류가 발생한다면, 이런 에러. 또는, 이런 에러. 이때, 다시 MySQL에 데이터베이스 생성 현재 프로젝트에서 이용할 데이터베이스를 MySQL 내부에 만들어주자. starbucks 라는 데이터 베이스를 생성한다. character set utf8mb4 - 한글 사용 활성화 지금은 아무 테이블도 없지만, 앞으로 이것 저것 넣으면 된다. ❔ 데이터베이스 삭제하려면 Django-MySQL 연동 여태 settings.py에 모든 정보…","frontmatter":{"date":"June 14, 2020","title":"Django에 MySQL 연결하여 데이터 저장하기","categories":"개발블로그","author":"이소헌","emoji":"👑"},"fields":{"slug":"/blog-20200217-Django-Connect-MySQL/"}},"next":null,"prev":{"id":"32f75736-964c-5606-bc82-02e20942c129","html":"<h1 id=\"정참조와-역참조-객체-서로-호출하기\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%B0%B8%EC%A1%B0%EC%99%80-%EC%97%AD%EC%B0%B8%EC%A1%B0-%EA%B0%9D%EC%B2%B4-%EC%84%9C%EB%A1%9C-%ED%98%B8%EC%B6%9C%ED%95%98%EA%B8%B0\" aria-label=\"정참조와 역참조 객체 서로 호출하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정참조와 역참조 객체 서로 호출하기</h1>\n<p>데이터베이스에서 두 테이블이 참조 관계에 있는 경우를 생각해보자. 예를 들어, <code class=\"language-text\">User</code> 테이블과 사용자의 직업인 <code class=\"language-text\">Occupation</code> 테이블이 있다. 두 테이블은 N:1 관계에 있으며, <code class=\"language-text\">User</code> 객체가 <code class=\"language-text\">Occupation</code> 객체를 참조하고 있다. <code class=\"language-text\">User</code> 가 <code class=\"language-text\">Occupation</code> 을 선택하여 입사 원서를 작성한다고 가정해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name\t<span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n    job\t\t<span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span><span class=\"token string\">'Occupation'</span><span class=\"token punctuation\">,</span> on_delete <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">)</span>\n    created_at\t<span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now_add <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Occupation</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">User</code> 객체는 <code class=\"language-text\">Occupation</code> 객체를 정참조 하고 있으므로, 속성 이름으로 바로 접근 할 수 있다. User1을 선택하여, 그 사람의 job을 찾아보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">user1 <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nuser1<span class=\"token punctuation\">.</span>job<span class=\"token punctuation\">.</span>name\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'Developer'</span></code></pre></div>\n<p>그러나 <code class=\"language-text\">Occupation</code> 객체는 <code class=\"language-text\">User</code> 객체를 역참조 하고 있으므로 바로 접근이 불가능하다. <code class=\"language-text\">developer</code> 이라는 <code class=\"language-text\">Occupation</code>을 가지고 있는 유저를 모두 찾아보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">job1   <span class=\"token operator\">=</span> Occupation<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'developer'</span><span class=\"token punctuation\">)</span>\npeople <span class=\"token operator\">=</span> job1<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 이게 될까?</span></code></pre></div>\n<p>❌ 안 됨 ❌</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;console>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\nAttributeError<span class=\"token punctuation\">:</span> <span class=\"token string\">'Occupation'</span> <span class=\"token builtin\">object</span> has no attribute <span class=\"token string\">'user'</span></code></pre></div>\n<p>그렇다고 절대로 사용하지 못하는 것은 절대 아니니 걱정하지말자. <strong>역참조 관계에 있을 때는 <code class=\"language-text\">[classname]_set</code> 이라는 속성을 사용하여 접근</strong>해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">job1   <span class=\"token operator\">=</span> Occupation<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\npeople <span class=\"token operator\">=</span> job1<span class=\"token punctuation\">.</span>user_set<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>QuerySet<span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>Object User Object<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>Object User Object<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></code></pre></div>\n<p>이 때, <code class=\"language-text\">user_set</code> 대신 사용할 수 있는 것이 <code class=\"language-text\">related_name</code>이다. 역참조 대상인 <code class=\"language-text\">user</code> 객체를 부를 이름.</p>\n<blockquote>\n<p>즉, <code class=\"language-text\">User</code> 클래스를 정의할 때, 정참조 하고 있는 <code class=\"language-text\">Occupation</code> 클래스의 인스턴스에서 어떤 명칭으로 거꾸로 호출당할 지 정해주는 이름인 것이다.</p>\n</blockquote>\n<h1 id=\"what-related-names-do\" style=\"position:relative;\"><a href=\"#what-related-names-do\" aria-label=\"what related names do permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What related names do</h1>\n<p>앞의 예시를 다시 보자. 아무래도 <code class=\"language-text\">Occupation</code>의 입장에서는 입사 지원자들을 <code class=\"language-text\">appliers</code>라고 부르는 것이 더 직관적이고 편할 것 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n    job\t <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'Occupation'</span><span class=\"token punctuation\">,</span>\n            on_delete    <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">,</span>\n            related_name <span class=\"token operator\">=</span> <span class=\"token string\">'appliers'</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span>Key Point !<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span>\n    created_at\t<span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now_add <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Occupation</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>[Key Point]</strong> 를 눈여겨 보자.\n<code class=\"language-text\">User</code>객체를 정의할 때, <code class=\"language-text\">job</code>이라는 속성에 <code class=\"language-text\">Occupation</code>객체가 연결되어 정참조하고 있다. <code class=\"language-text\">Occupation</code>객체의 인스턴스와 연결되어 있는 <code class=\"language-text\">User</code> 객체를 거꾸로 불러올 때, <code class=\"language-text\">appliers</code> 라는 이름으로 부르기 위해 <code class=\"language-text\">job</code> 속성에 <code class=\"language-text\">related_names = 'appliers'</code>를 함께 지정해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">job1   <span class=\"token operator\">=</span> Occupation<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\npeople <span class=\"token operator\">=</span> job1<span class=\"token punctuation\">.</span>appliers<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>QuerySet<span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>Object User Object<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>Object User Object<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></code></pre></div>\n<p>잘 동작하는 것을 알 수 있다. 모든 Foreign Key에 related<em>name을 붙여줄 필요는 없다. 때에 따라, 참조하고 있는 객체 이름에 `</em>set`을 붙이는 것이 더 직관적인 경우가 굉장히 많기 때문이다.</p>\n<h1 id=\"related-name이-필수인-경우가-있다\" style=\"position:relative;\"><a href=\"#related-name%EC%9D%B4-%ED%95%84%EC%88%98%EC%9D%B8-%EA%B2%BD%EC%9A%B0%EA%B0%80-%EC%9E%88%EB%8B%A4\" aria-label=\"related name이 필수인 경우가 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Related name이 필수인 경우가 있다.</h1>\n<p>바로 한 클래스에서 서로 다른 두 컬럼(속성)이 같은 테이블(클래스)를 참조하는 경우이다.\n앞서 설명한 상황에서, 지원자가 필수로 신청한 <code class=\"language-text\">occupation</code>외에, 2지망인 <code class=\"language-text\">occupation</code>도 받는다고 가정해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name       <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n    job\t       <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span><span class=\"token string\">'Occupation'</span><span class=\"token punctuation\">,</span> on_delete <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span><span class=\"token punctuation\">]</span> choice_2nd <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span><span class=\"token string\">'Occupation'</span><span class=\"token punctuation\">,</span> on_delete <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">,</span> null <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    created_at <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now_add <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Occupation</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<ul>\n<li>참고로 위와 같은 선언은 애초에 마이그레이션이 되지 않는다. related_name 지정하라는 문구만 뜸.</li>\n</ul>\n</blockquote>\n<p><code class=\"language-text\">User</code>객체에서 <code class=\"language-text\">Occupation</code>객체를 정참조 하는 속성이 두 개이다. 다시 말해 <code class=\"language-text\">developer</code>이라는 <code class=\"language-text\">Occupations</code>객체의 인스턴스를 1지망으로 선택한 지원자와 2지망으로 선택한 지원자가 따로 구별되어있다는 뜻이 된다. 아래 두 인스턴스를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">user1 <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Nick'</span><span class=\"token punctuation\">,</span> job_id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#developer</span>\nuser2 <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Sue'</span><span class=\"token punctuation\">,</span> job_id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> choice_2nd_id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">user1</code>은 1지망은 <code class=\"language-text\">job</code>으로 <code class=\"language-text\">id</code>가 <code class=\"language-text\">1</code>번인 <code class=\"language-text\">developer</code>이다.\n<code class=\"language-text\">user2</code>의 1지망은 <code class=\"language-text\">2</code>번 <code class=\"language-text\">job</code>이고, <strong>2지망</strong>이 <code class=\"language-text\">developer</code>이다.</p>\n<h3 id=\"이-때-related_name이-없다면\" style=\"position:relative;\"><a href=\"#%EC%9D%B4-%EB%95%8C-related_name%EC%9D%B4-%EC%97%86%EB%8B%A4%EB%A9%B4\" aria-label=\"이 때 related_name이 없다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이 때 related_name이 없다면?</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">job1 = Occupation.objects.get(id = 1)\njob1.user_set.all()</code></pre></div>\n<p>의 결과가 생성될 수 있을까?\n❌ 안 됨 ❌</p>\n<blockquote>\n<p><code class=\"language-text\">Occupation</code>객체를 정참조 하고 있는 컬럼이 <code class=\"language-text\">job</code>과<code class=\"language-text\">choice_2nd</code>두 개이므로, 그저 user_set이라는 속성만으로는 자신을 바라보고 있는 두 User 객체 가운데 어떤 속성에 접근해야할 지 알 수가 없기 때문이다. 즉, <code class=\"language-text\">developer</code>을 1지망으로 고른 사람들의 목록(<code class=\"language-text\">Nick</code>)을 가져와야할 지, 2지망으로 고른 사람들의 목록(<code class=\"language-text\">Sue</code>)을 가져와야할 지 알 수가 없기 때문이다.</p>\n</blockquote>\n<h3 id=\"바로-이럴-때-related_name이-필수인-것이다\" style=\"position:relative;\"><a href=\"#%EB%B0%94%EB%A1%9C-%EC%9D%B4%EB%9F%B4-%EB%95%8C-related_name%EC%9D%B4-%ED%95%84%EC%88%98%EC%9D%B8-%EA%B2%83%EC%9D%B4%EB%8B%A4\" aria-label=\"바로 이럴 때 related_name이 필수인 것이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>바로 이럴 때 related_name이 필수인 것이다.</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n    job\t <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'Occupation'</span><span class=\"token punctuation\">,</span>\n            on_delete    <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">,</span>\n            related_name <span class=\"token operator\">=</span> <span class=\"token string\">'appliers'</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span>Key Point !<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span>\n    choice_2nd  <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'Occupation'</span><span class=\"token punctuation\">,</span>\n            on_delete    <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">,</span>\n            null         <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n            related_name <span class=\"token operator\">=</span> <span class=\"token string\">'second_appliers'</span>\n        <span class=\"token punctuation\">)</span>\n    created_at\t<span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now_add <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>이제는 <code class=\"language-text\">developer</code>을 1지망으로 지원한 Nick과 2지망으로 지원한 Sue를 구분하여 호출할 수 있다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">job1 <span class=\"token operator\">=</span> Occupation<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\njob1<span class=\"token punctuation\">.</span>appliers<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>QuerySet<span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>Object User Object<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\"># ---> Nick</span>\n\njob1<span class=\"token punctuation\">.</span>second_appliers<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>QuerySet<span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>Object User Object<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\"># ---> Sue</span></code></pre></div>\n<blockquote>\n<h4 id=\"예시에서는-foreign-key만을-다루었는데-manytomany-관계에-있을-때에도-related_name은-같은-원리로-동작한다-헷갈리지-않게-주의하자\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C%EC%97%90%EC%84%9C%EB%8A%94-foreign-key%EB%A7%8C%EC%9D%84-%EB%8B%A4%EB%A3%A8%EC%97%88%EB%8A%94%EB%8D%B0-manytomany-%EA%B4%80%EA%B3%84%EC%97%90-%EC%9E%88%EC%9D%84-%EB%95%8C%EC%97%90%EB%8F%84-related_name%EC%9D%80-%EA%B0%99%EC%9D%80-%EC%9B%90%EB%A6%AC%EB%A1%9C-%EB%8F%99%EC%9E%91%ED%95%9C%EB%8B%A4-%ED%97%B7%EA%B0%88%EB%A6%AC%EC%A7%80-%EC%95%8A%EA%B2%8C-%EC%A3%BC%EC%9D%98%ED%95%98%EC%9E%90\" aria-label=\"예시에서는 foreign key만을 다루었는데 manytomany 관계에 있을 때에도 related_name은 같은 원리로 동작한다 헷갈리지 않게 주의하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시에서는 Foreign Key만을 다루었는데, ManyToMany 관계에 있을 때에도 related_name은 같은 원리로 동작한다. 헷갈리지 않게 주의하자.</h4>\n</blockquote>\n<h1 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h1>\n<p>웹의 구조나 서비스가 복잡해질 수록, 클래스 사이의 참조가 많아진다. 일대다는 물론이고, 다대다 관계도 계속 늘어난다. 그럴 때일 수록 related name이 중요하다고 생각한다. 어떻게든 migration만 되면 되지. 라는 생각으로 related_name을 마음대로 설정하다 보면, 나중엔 변수 이름을 아무렇게나 정했을 때만큼이나 의미를 알수 없는 코드를 양산하게 되기 때문이다.</p>\n<p>오늘도 많이 배웠다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%9D%B4-%EB%95%8C-related_name%EC%9D%B4-%EC%97%86%EB%8B%A4%EB%A9%B4\">이 때 related_name이 없다면?</a></li>\n<li><a href=\"#%EB%B0%94%EB%A1%9C-%EC%9D%B4%EB%9F%B4-%EB%95%8C-related_name%EC%9D%B4-%ED%95%84%EC%88%98%EC%9D%B8-%EA%B2%83%EC%9D%B4%EB%8B%A4\">바로 이럴 때 related_name이 필수인 것이다.</a></li>\n</ul>\n</div>","frontmatter":{"date":"June 14, 2020","title":"Django과 Reverse relation과 related_name","categories":"개발블로그","author":"이소헌","emoji":"👑"},"fields":{"slug":"/blog-20210614-Django-Related_name/"}},"site":{"siteMetadata":{"siteUrl":"https://www.zoomkoding.com","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/blog-20200217-Django-Connect-MySQL/","nextSlug":"","prevSlug":"/blog-20210614-Django-Related_name/"}},"staticQueryHashes":["1073350324","2938748437"]}