{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog-20210922-Exporting-module-part2/","result":{"data":{"cur":{"id":"06b424a8-7f95-549b-9b1a-26843612f0ea","html":"<blockquote>\n<p>Node.js에서 모듈을 내보내고(export) 불러와서(import) 사용하는 방법을 다루는 글입니다. 네파트로 나뉘어있습니다.</p>\n</blockquote>\n<ul>\n<li>PART1 - module.exports (feat. CommonJS)</li>\n<li>PART2 - export/import with .mjs (feat. ES6)</li>\n<li>PART3 - { type: module }</li>\n<li>PART4 - export/import with babel (feat. prisma client)</li>\n</ul>\n<h2 id=\"common-js---moduleexports--require\" style=\"position:relative;\"><a href=\"#common-js---moduleexports--require\" aria-label=\"common js   moduleexports  require permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Common JS - (module.exports &#x26; require)</h2>\n<p>가장 처음 알아야 하는 방법이다.</p>\n<p>Node.js 모듈 시스템에서는, 파일 한 개를 모듈 한 개로 생각한다. 따라서, 파일 하나를 모듈로 불러도 무방하다. ‘모듈이 파일이구나’ 라고 생각하고 접근하도록 하자.</p>\n<h3 id=\"변수를-내보내고export-다른-모듈에서-불러오기require\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98%EB%A5%BC-%EB%82%B4%EB%B3%B4%EB%82%B4%EA%B3%A0export-%EB%8B%A4%EB%A5%B8-%EB%AA%A8%EB%93%88%EC%97%90%EC%84%9C-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0require\" aria-label=\"변수를 내보내고export 다른 모듈에서 불러오기require permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수를 내보내고(export), 다른 모듈에서 불러오기(require)</h3>\n<ol>\n<li>\n<p>테스트를 위해 <code class=\"language-text\">JS_module_tutorial</code> 이라는 디렉토리를 하나 생성했다. 내부에는 파일 두개를 만든다.</p>\n<ul>\n<li><code class=\"language-text\">ex1_greetings.js</code> : 인사말을 변수로 저장해둔 모듈</li>\n<li><code class=\"language-text\">ex2_sayHello.js</code> : 인사하는 함수를 선언하고 실행할 모듈</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">ex1</code> 모듈에서 변수를 선언하고, 모듈 내부에서도 활용할 수 있도록 <code class=\"language-text\">module.exports</code>를 이용해 내보낸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ./ex1_greetings.js</span>\n<span class=\"token keyword\">const</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">'Hello! Nice to meet you, '</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> greeting<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>선언한 변수를 <code class=\"language-text\">ex2</code> 모듈에서 불러와 사용하고자 한다. 불러온 인사말을 활용하여 함수 <code class=\"language-text\">sayHello</code>를 선언하고, 적당한 argument와 함께 호출한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ./ex2_sayHello.js</span>\n<span class=\"token keyword\">const</span> greeting <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./ex1_greetings'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'greeting: '</span><span class=\"token punctuation\">,</span> greeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> greeting <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'이워크'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>터미널에서 <code class=\"language-text\">ex2</code> 파일을 실행시킨다.</p>\n<p>실행</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">node ex2_sayHello.js</code></pre></div>\n<p>결과</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">greeting: Hello! Nice to meet you,\nHello! Nice to meet you, 이워크</code></pre></div>\n</li>\n</ol>\n<p>우리의 예상 그대로, <code class=\"language-text\">ex1</code> 모듈에서 내보낸 <code class=\"language-text\">greeting</code> 변수를 아무 무리 없이 <code class=\"language-text\">ex2</code> 모듈에서 사용할 수 있다.</p>\n<p><code class=\"language-text\">require()</code> 문법은 기본적으로 자바스크립트 파일을 읽고, 해당 파일을 한 번 실행시킨 후, <code class=\"language-text\">export</code> 객체를 반환하는 과정을 진행한다. 위 예시에서 반환된 대상은 <code class=\"language-text\">greeting</code>이라는 변수이다. 여기서 한가지 짚고 넘어가야 할 점이 있다. require 하는 파일 입장에서는 불러오는 모듈 <code class=\"language-text\">ex1_greeting</code>을 그 어떤 이름으로 불러와도 상관이 없다.</p>\n<p><code class=\"language-text\">ex1</code> 모듈을 sentence라는 이름으로 불러와보자. <code class=\"language-text\">ex2_sayHello.js</code> 파일에서 가장 첫 줄과 세번째 줄을 다음 코드와 같이 변경해도 정확하게 동일한 기능을 수행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ./ex2_sayHello.js</span>\n\n<span class=\"token keyword\">const</span> sentence <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./ex1_greetings'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> sentence <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'이워크'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">ex1</code> 모듈에서 export 하는 대상이 정해져있고, <code class=\"language-text\">require()</code> 메소드는 반한된 export객체를 받기 때문에, 받는 변수의 이름은 상관이 없다. 납득하기 어렵지 않다.</p>\n<h3 id=\"한-모듈에서-여러-객체-내보내기\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EB%AA%A8%EB%93%88%EC%97%90%EC%84%9C-%EC%97%AC%EB%9F%AC-%EA%B0%9D%EC%B2%B4-%EB%82%B4%EB%B3%B4%EB%82%B4%EA%B8%B0\" aria-label=\"한 모듈에서 여러 객체 내보내기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 모듈에서 여러 객체 내보내기</h3>\n<p>그렇다면 <code class=\"language-text\">ex1_greetings.js</code> 모듈 내부에 변수 또는 함수가 여러개인 경우에는 어떨까? 아래처럼 <code class=\"language-text\">module.exports</code>를 여러번 사용하면 될까?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ex1_greetings.js</span>\n\n<span class=\"token keyword\">const</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">'Hello! Nice to meet you, '</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> greeting2 <span class=\"token operator\">=</span> <span class=\"token string\">'I am very happy to see you again, '</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> greeting<span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> greeting2<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 할 수는 없다. <code class=\"language-text\">module.exports</code>라는 객체에 재할당 되었으므로, 덮어씌워졌다고 할 수 있다. <code class=\"language-text\">greeting2</code>만 사용할 수 있다.\n한가지</p>\n<p>아래와 같이 하나의 객체로 내보내야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  greeting<span class=\"token punctuation\">,</span>\n  greeting2<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">ex1</code> 모듈에서 이렇게 내보낸다면, 불러와서 사용하는 <code class=\"language-text\">ex2</code>파일에서도 사용법이 달라져야 한다. 우선 <code class=\"language-text\">ex2</code> 코드를 수정하지 않고, 이전 코드 그대로 한 번 실행해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ./ex2_sayHello.js</span>\n\n<span class=\"token keyword\">const</span> sentence <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./ex1_greetings'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sentence: '</span><span class=\"token punctuation\">,</span> sentence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> sentence <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'이워크'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>실행</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">node ex2_sayHello.js</code></pre></div>\n<p>결과</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">greeting<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  greeting<span class=\"token operator\">:</span> <span class=\"token string\">'Hello! Nice to meet you, '</span><span class=\"token punctuation\">,</span>\n  greeting2<span class=\"token operator\">:</span> <span class=\"token string\">'I am very happy to see you again, '</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">[</span>object Object<span class=\"token punctuation\">]</span>이워크</code></pre></div>\n<p>콘솔에 <code class=\"language-text\">sentence</code>를 찍어보니 객체 형태 그대로 불러온 것을 알 수 있다. 따라서, 선언된 문구를 그대로 사용하고 싶다면 객체의 key를 활용해야만 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ./ex2_sayHello.js</span>\n\n<span class=\"token keyword\">const</span> sentence <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./ex1_greetings'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sentence: '</span><span class=\"token punctuation\">,</span> sentence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> sentence<span class=\"token punctuation\">.</span>greeting <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 또는</span>\n  <span class=\"token keyword\">return</span> sentence<span class=\"token punctuation\">.</span>greeting2 <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'이워크'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>사용하기에 어렵지는 않다. 매번 <code class=\"language-text\">sentence</code>라는 객체를 언급하기가 번거롭다면, 모듈을 불러올 때에도 <strong>구조분해할당</strong>을 활용하기도 한다. 단, 이때는 <code class=\"language-text\">greeting</code> 이나 <code class=\"language-text\">greeting2</code> 와 같은 이름이 동일하게 유지되어야 한다. 납득하기 어렵지 않다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> greeting<span class=\"token punctuation\">,</span> greeting2 <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./ex1_greetings'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GREETING: '</span><span class=\"token punctuation\">,</span> greeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GREETING2: '</span><span class=\"token punctuation\">,</span> greeting2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> greeting <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 또는</span>\n  <span class=\"token keyword\">return</span> greeting2 <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 방법은 편하지만, 간혹 서로 다른 모듈에서 같은 이름의 변수와 함수가 있을 수 있기에 때에 따라 보다 정확한 변수 사용을 위해서는 require한 모듈의 이름을 정확하게 명시해주는 것이 좋을 때도 있다. <em>진리의 케바케</em></p>\n<h2 id=\"그-외\" style=\"position:relative;\"><a href=\"#%EA%B7%B8-%EC%99%B8\" aria-label=\"그 외 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그 외</h2>\n<h3 id=\"require은-일단-파일을-한-번-실행시킨다\" style=\"position:relative;\"><a href=\"#require%EC%9D%80-%EC%9D%BC%EB%8B%A8-%ED%8C%8C%EC%9D%BC%EC%9D%84-%ED%95%9C-%EB%B2%88-%EC%8B%A4%ED%96%89%EC%8B%9C%ED%82%A8%EB%8B%A4\" aria-label=\"require은 일단 파일을 한 번 실행시킨다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>require은 일단 파일을 한 번 실행시킨다</h3>\n<p>위에서 한 번 언급했는데, require() 함수는 파일을 불러오면서 기본적으로 한 번 실행한다. 따라서 <code class=\"language-text\">ex1</code> 모듈에</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'안녕, 나는 ex1 파일이야'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>라는 코드가 있다면 <code class=\"language-text\">ex2</code> 모듈에서 require하자마자 콘솔로그가 실행된다.</p>\n<hr>\n<p>여기까지, Node.js가 가장 기본적으로 사용하는 CommonJS 문법 사용법이다. 모듈을 생성하고, 변수 또는 함수를 내보내거나 (export) 불러올 때 (require) 사용한다.</p>\n<p><code class=\"language-text\">module.exports</code> 문법과 그냥 <code class=\"language-text\">export</code> 문법의 차이점에서는 다음 글에서 짚어보도록 하겠다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#common-js---moduleexports--require\">Common JS - (module.exports &#x26; require)</a></p>\n<ul>\n<li><a href=\"#%EB%B3%80%EC%88%98%EB%A5%BC-%EB%82%B4%EB%B3%B4%EB%82%B4%EA%B3%A0export-%EB%8B%A4%EB%A5%B8-%EB%AA%A8%EB%93%88%EC%97%90%EC%84%9C-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0require\">변수를 내보내고(export), 다른 모듈에서 불러오기(require)</a></li>\n<li><a href=\"#%ED%95%9C-%EB%AA%A8%EB%93%88%EC%97%90%EC%84%9C-%EC%97%AC%EB%9F%AC-%EA%B0%9D%EC%B2%B4-%EB%82%B4%EB%B3%B4%EB%82%B4%EA%B8%B0\">한 모듈에서 여러 객체 내보내기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B7%B8-%EC%99%B8\">그 외</a></p>\n<ul>\n<li><a href=\"#require%EC%9D%80-%EC%9D%BC%EB%8B%A8-%ED%8C%8C%EC%9D%BC%EC%9D%84-%ED%95%9C-%EB%B2%88-%EC%8B%A4%ED%96%89%EC%8B%9C%ED%82%A8%EB%8B%A4\">require은 일단 파일을 한 번 실행시킨다</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"Node.js에서 모듈을 내보내고(export) 불러와서(import) 사용하는 방법을 다루는 글입니다. 네파트로 나뉘어있습니다. PART1 - module.exports (feat. CommonJS) PART2 - export/import with .mjs (feat. ES6) PART3 - { type: module } PART4 - export/import with babel (feat. prisma client) Common JS - (module.exports & require) 가장 처음 알아야 하는 방법이다. Node.js 모듈 시스템에서는, 파일 한 개를 모듈 한 개로 생각한다. 따라서, 파일 하나를 모듈로 불러도 무방하다. ‘모듈이 파일이구나’ 라고 생각하고 접근하도록 하자. 변수를 내보내고(export), 다른 모듈에서 불러오기(require) 테스트를 위해  이라는 디렉토리를 하나 생성했다. 내부에는 파일 두개를 만든다.  : 인사말을 변수로 저장해둔 모듈  :…","frontmatter":{"date":"September 22, 2021","title":"Node.js & Module - PART2 (import/export .mjs file)","categories":"개발블로그","author":"이워크","emoji":"👑"},"fields":{"slug":"/blog-20210922-Exporting-module-part2/"}},"next":{"id":"8b826482-0327-5523-8c6a-849704c12b10","html":"<blockquote>\n<p>Node.js에서 모듈을 내보내고(export) 불러와서(import) 사용하는 방법을 다루는 글입니다. 네파트로 나뉘어있습니다.</p>\n</blockquote>\n<ul>\n<li>PART1 - module.exports (feat. CommonJS)</li>\n<li>PART2 - export/import with .mjs (feat. ES6)</li>\n<li>PART3 - { type: module }</li>\n<li>PART4 - export/import with babel (feat. prisma client)</li>\n</ul>\n<h2 id=\"common-js---moduleexports--require\" style=\"position:relative;\"><a href=\"#common-js---moduleexports--require\" aria-label=\"common js   moduleexports  require permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Common JS - (module.exports &#x26; require)</h2>\n<p>가장 처음 알아야 하는 방법이다. Node.js가 CommonJS 모듈 시스템을 사용하고 있기 때문이다.</p>\n<p>Node.js 모듈 시스템에서는, 파일 한 개를 모듈 한 개로 생각한다. 따라서, 파일 하나를 모듈로 불러도 무방하다. ‘모듈이 파일이구나’ 라고 생각하고 접근하도록 하자.</p>\n<h3 id=\"변수를-내보내고export-다른-모듈에서-불러오기require\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98%EB%A5%BC-%EB%82%B4%EB%B3%B4%EB%82%B4%EA%B3%A0export-%EB%8B%A4%EB%A5%B8-%EB%AA%A8%EB%93%88%EC%97%90%EC%84%9C-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0require\" aria-label=\"변수를 내보내고export 다른 모듈에서 불러오기require permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수를 내보내고(export), 다른 모듈에서 불러오기(require)</h3>\n<ol>\n<li>\n<p>테스트를 위해 <code class=\"language-text\">JS_module_tutorial</code> 이라는 디렉토리를 하나 생성했다. 내부에는 파일 두개를 만든다.</p>\n<ul>\n<li><code class=\"language-text\">ex1_greetings.js</code> : 인사말을 변수로 저장해둔 모듈</li>\n<li><code class=\"language-text\">ex2_sayHello.js</code> : 인사하는 함수를 선언하고 실행할 모듈</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">ex1</code> 모듈에서 변수를 선언하고, 모듈 내부에서도 활용할 수 있도록 <code class=\"language-text\">module.exports</code>를 이용해 내보낸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ./ex1_greetings.js</span>\n<span class=\"token keyword\">const</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">'Hello! Nice to meet you, '</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> greeting<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>선언한 변수를 <code class=\"language-text\">ex2</code> 모듈에서 불러와 사용하고자 한다. 불러온 인사말을 활용하여 함수 <code class=\"language-text\">sayHello</code>를 선언하고, 적당한 argument와 함께 호출한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ./ex2_sayHello.js</span>\n<span class=\"token keyword\">const</span> greeting <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./ex1_greetings'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'greeting: '</span><span class=\"token punctuation\">,</span> greeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> greeting <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'이워크'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>터미널에서 <code class=\"language-text\">ex2</code> 파일을 실행시킨다.</p>\n<p>실행</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">node ex2_sayHello.js</code></pre></div>\n<p>결과</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">greeting: Hello! Nice to meet you,\nHello! Nice to meet you, 이워크</code></pre></div>\n</li>\n</ol>\n<p>우리의 예상 그대로, <code class=\"language-text\">ex1</code> 모듈에서 내보낸 <code class=\"language-text\">greeting</code> 변수를 아무 무리 없이 <code class=\"language-text\">ex2</code> 모듈에서 사용할 수 있다.</p>\n<p><code class=\"language-text\">require()</code> 문법은 기본적으로 자바스크립트 파일을 읽고, 해당 파일을 한 번 실행시킨 후, <code class=\"language-text\">export</code> 객체를 반환하는 과정을 진행한다. 위 예시에서 반환된 대상은 <code class=\"language-text\">greeting</code>이라는 변수이다. 여기서 한가지 짚고 넘어가야 할 점이 있다. require 하는 파일 입장에서는 불러오는 모듈 <code class=\"language-text\">ex1_greeting</code>을 그 어떤 이름으로 불러와도 상관이 없다.</p>\n<p><code class=\"language-text\">ex1</code> 모듈을 sentence라는 이름으로 불러와보자. <code class=\"language-text\">ex2_sayHello.js</code> 파일에서 가장 첫 줄과 세번째 줄을 다음 코드와 같이 변경해도 정확하게 동일한 기능을 수행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ./ex2_sayHello.js</span>\n\n<span class=\"token keyword\">const</span> sentence <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./ex1_greetings'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> sentence <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'이워크'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">ex1</code> 모듈에서 export 하는 대상이 정해져있고, <code class=\"language-text\">require()</code> 메소드는 반한된 export객체를 받기 때문에, 받는 변수의 이름은 상관이 없다. 납득하기 어렵지 않다.</p>\n<h3 id=\"한-모듈에서-여러-객체-내보내기\" style=\"position:relative;\"><a href=\"#%ED%95%9C-%EB%AA%A8%EB%93%88%EC%97%90%EC%84%9C-%EC%97%AC%EB%9F%AC-%EA%B0%9D%EC%B2%B4-%EB%82%B4%EB%B3%B4%EB%82%B4%EA%B8%B0\" aria-label=\"한 모듈에서 여러 객체 내보내기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>한 모듈에서 여러 객체 내보내기</h3>\n<p>그렇다면 <code class=\"language-text\">ex1_greetings.js</code> 모듈 내부에 변수 또는 함수가 여러개인 경우에는 어떨까? 아래처럼 <code class=\"language-text\">module.exports</code>를 여러번 사용하면 될까?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ex1_greetings.js</span>\n\n<span class=\"token keyword\">const</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">'Hello! Nice to meet you, '</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> greeting2 <span class=\"token operator\">=</span> <span class=\"token string\">'I am very happy to see you again, '</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> greeting<span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> greeting2<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 할 수는 없다. <code class=\"language-text\">module.exports</code>라는 객체에 재할당 되었으므로, 덮어씌워졌다고 할 수 있다. greeting2만 내보내지기 때문에 다른 모듈에서는 <code class=\"language-text\">greeting2</code>만 사용할 수 있다.</p>\n<p>아래와 같이 하나의 객체로 내보낼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  greeting<span class=\"token punctuation\">,</span>\n  greeting2<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">ex1</code> 모듈에서 이렇게 내보낸다면, 불러와서 사용하는 <code class=\"language-text\">ex2</code>파일에서도 사용법이 달라져야 한다. 우선 <code class=\"language-text\">ex2</code> 코드를 수정하지 않고, 이전 코드 그대로 한 번 실행해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ./ex2_sayHello.js</span>\n\n<span class=\"token keyword\">const</span> sentence <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./ex1_greetings'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sentence: '</span><span class=\"token punctuation\">,</span> sentence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> sentence <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'이워크'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>실행</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">node ex2_sayHello.js</code></pre></div>\n<p>결과</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">greeting<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  greeting<span class=\"token operator\">:</span> <span class=\"token string\">'Hello! Nice to meet you, '</span><span class=\"token punctuation\">,</span>\n  greeting2<span class=\"token operator\">:</span> <span class=\"token string\">'I am very happy to see you again, '</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">[</span>object Object<span class=\"token punctuation\">]</span>이워크</code></pre></div>\n<p>콘솔에 <code class=\"language-text\">sentence</code>를 찍어보니 객체 형태 그대로 불러온 것을 알 수 있다. 따라서, 선언된 문구를 그대로 사용하고 싶다면 객체의 key를 활용해야만 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ./ex2_sayHello.js</span>\n\n<span class=\"token keyword\">const</span> sentence <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./ex1_greetings'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sentence: '</span><span class=\"token punctuation\">,</span> sentence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> sentence<span class=\"token punctuation\">.</span>greeting <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 또는</span>\n  <span class=\"token keyword\">return</span> sentence<span class=\"token punctuation\">.</span>greeting2 <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'이워크'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>사용하기에 어렵지는 않다. 매번 <code class=\"language-text\">sentence</code>라는 객체를 언급하기가 번거롭다면, 모듈을 불러올 때에도 <strong>구조분해할당</strong>을 활용하기도 한다. 단, 이때는 <code class=\"language-text\">greeting</code> 이나 <code class=\"language-text\">greeting2</code> 와 같은 이름이 동일하게 유지되어야 한다. 납득하기 어렵지 않다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> greeting<span class=\"token punctuation\">,</span> greeting2 <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./ex1_greetings'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GREETING: '</span><span class=\"token punctuation\">,</span> greeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GREETING2: '</span><span class=\"token punctuation\">,</span> greeting2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> greeting <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 또는</span>\n  <span class=\"token keyword\">return</span> greeting2 <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 방법은 편하지만, 간혹 서로 다른 모듈에서 같은 이름의 변수와 함수가 있을 수 있기에 때에 따라 보다 정확한 변수 사용을 위해서는 require한 모듈의 이름을 정확하게 명시해주는 것이 좋을 때도 있다. <em>진리의 케바케</em></p>\n<ul>\n<li><code class=\"language-text\">module.exports</code> 외에 <code class=\"language-text\">export</code>를 사용하는 방법이 있다. <code class=\"language-text\">module.exports</code> 문법과 그냥 <code class=\"language-text\">export</code> 문법의 차이점에서는 다음 글에서 짚어보도록 하겠다.</li>\n</ul>\n<h2 id=\"그-외\" style=\"position:relative;\"><a href=\"#%EA%B7%B8-%EC%99%B8\" aria-label=\"그 외 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그 외</h2>\n<h3 id=\"1require-할-수-있는-파일은-code-classlanguage-textjscode-파일-뿐\" style=\"position:relative;\"><a href=\"#1require-%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%ED%8C%8C%EC%9D%BC%EC%9D%80-code-classlanguage-textjscode-%ED%8C%8C%EC%9D%BC-%EB%BF%90\" aria-label=\"1require 할 수 있는 파일은 code classlanguage textjscode 파일 뿐 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.require 할 수 있는 파일은 <code class=\"language-text\">.js</code> 파일 뿐</h3>\n<p>ex1_greeting.js 파일의 확장자를 변경해보자.</p>\n<ul>\n<li>ex1_greeting.mjs</li>\n<li>ex1_greeting.js2</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">internal/modules/cjs/loader.js:1033\n  throw err;\n  ^\n\nError: Cannot find module &#39;./ex1_greeting&#39;\nRequire stack:\n- /Users/soheonlee/Development/JS_module_tutorial/ex2_sayHello.js</code></pre></div>\n<p>해당 모듈을 찾을 수 없다는 에러가 발생한다. require할 수 있는 대상은 <code class=\"language-text\">.js</code> 확장자 파일뿐이다.</p>\n<h3 id=\"2require은-일단-파일을-한-번-실행시킨다\" style=\"position:relative;\"><a href=\"#2require%EC%9D%80-%EC%9D%BC%EB%8B%A8-%ED%8C%8C%EC%9D%BC%EC%9D%84-%ED%95%9C-%EB%B2%88-%EC%8B%A4%ED%96%89%EC%8B%9C%ED%82%A8%EB%8B%A4\" aria-label=\"2require은 일단 파일을 한 번 실행시킨다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.require은 일단 파일을 한 번 실행시킨다</h3>\n<p>위에서 한 번 언급했는데, require() 함수는 파일을 불러오면서 기본적으로 한 번 실행한다. 따라서 <code class=\"language-text\">ex1</code> 모듈에</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'안녕, 나는 ex1 파일이야'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>라는 코드가 있다면 <code class=\"language-text\">ex2</code> 모듈에서 require하자마자 콘솔로그가 실행된다.</p>\n<h3 id=\"3require-은-파일-어디에서나-사용-가능하다\" style=\"position:relative;\"><a href=\"#3require-%EC%9D%80-%ED%8C%8C%EC%9D%BC-%EC%96%B4%EB%94%94%EC%97%90%EC%84%9C%EB%82%98-%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%98%EB%8B%A4\" aria-label=\"3require 은 파일 어디에서나 사용 가능하다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.require 은 파일 어디에서나 사용 가능하다</h3>\n<p>통상적으로 모듈을 불러는 과정은 파일 가장 상단에서 진행한다. 필요한 모듈을 미리 불러와 가독성을 높이고 디버깅을 쉽게 만드는 방법이다. 그러나 <code class=\"language-text\">require</code> 메소드는 파일 최상단이 아닌 그 어느 위치에서도 호출할 수 있다. 이와 같은 방법을 잘 사용하지 않을 뿐.</p>\n<hr>\n<p>여기까지, Node.js가 가장 기본적으로 사용하는 CommonJS 문법 사용법이다. 모듈을 생성하고, 변수 또는 함수를 내보내거나 (export) 불러올 때 (require) 사용한다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#common-js---moduleexports--require\">Common JS - (module.exports &#x26; require)</a></p>\n<ul>\n<li><a href=\"#%EB%B3%80%EC%88%98%EB%A5%BC-%EB%82%B4%EB%B3%B4%EB%82%B4%EA%B3%A0export-%EB%8B%A4%EB%A5%B8-%EB%AA%A8%EB%93%88%EC%97%90%EC%84%9C-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0require\">변수를 내보내고(export), 다른 모듈에서 불러오기(require)</a></li>\n<li><a href=\"#%ED%95%9C-%EB%AA%A8%EB%93%88%EC%97%90%EC%84%9C-%EC%97%AC%EB%9F%AC-%EA%B0%9D%EC%B2%B4-%EB%82%B4%EB%B3%B4%EB%82%B4%EA%B8%B0\">한 모듈에서 여러 객체 내보내기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B7%B8-%EC%99%B8\">그 외</a></p>\n<ul>\n<li><a href=\"#1require-%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%ED%8C%8C%EC%9D%BC%EC%9D%80-js-%ED%8C%8C%EC%9D%BC-%EB%BF%90\">1.require 할 수 있는 파일은 <code class=\"language-text\">.js</code> 파일 뿐</a></li>\n<li><a href=\"#2require%EC%9D%80-%EC%9D%BC%EB%8B%A8-%ED%8C%8C%EC%9D%BC%EC%9D%84-%ED%95%9C-%EB%B2%88-%EC%8B%A4%ED%96%89%EC%8B%9C%ED%82%A8%EB%8B%A4\">2.require은 일단 파일을 한 번 실행시킨다</a></li>\n<li><a href=\"#3require-%EC%9D%80-%ED%8C%8C%EC%9D%BC-%EC%96%B4%EB%94%94%EC%97%90%EC%84%9C%EB%82%98-%EC%82%AC%EC%9A%A9-%EA%B0%80%EB%8A%A5%ED%95%98%EB%8B%A4\">3.require 은 파일 어디에서나 사용 가능하다</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 21, 2021","title":"Node.js & Module - PART1 (module.exports)","categories":"개발블로그","author":"이워크","emoji":"👑"},"fields":{"slug":"/blog-20210921-Exporting-module-part1/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://www.zoomkoding.com","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/blog-20210922-Exporting-module-part2/","nextSlug":"/blog-20210921-Exporting-module-part1/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}