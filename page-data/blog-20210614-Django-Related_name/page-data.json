{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog-20210614-Django-Related_name/","result":{"data":{"cur":{"id":"32f75736-964c-5606-bc82-02e20942c129","html":"<h1 id=\"정참조와-역참조-객체-서로-호출하기\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%B0%B8%EC%A1%B0%EC%99%80-%EC%97%AD%EC%B0%B8%EC%A1%B0-%EA%B0%9D%EC%B2%B4-%EC%84%9C%EB%A1%9C-%ED%98%B8%EC%B6%9C%ED%95%98%EA%B8%B0\" aria-label=\"정참조와 역참조 객체 서로 호출하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정참조와 역참조 객체 서로 호출하기</h1>\n<p>데이터베이스에서 두 테이블이 참조 관계에 있는 경우를 생각해보자. 예를 들어, <code class=\"language-text\">User</code> 테이블과 사용자의 직업인 <code class=\"language-text\">Occupation</code> 테이블이 있다. 두 테이블은 N:1 관계에 있으며, <code class=\"language-text\">User</code> 객체가 <code class=\"language-text\">Occupation</code> 객체를 참조하고 있다. <code class=\"language-text\">User</code> 가 <code class=\"language-text\">Occupation</code> 을 선택하여 입사 원서를 작성한다고 가정해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name\t<span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n    job\t\t<span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span><span class=\"token string\">'Occupation'</span><span class=\"token punctuation\">,</span> on_delete <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">)</span>\n    created_at\t<span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now_add <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Occupation</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">User</code> 객체는 <code class=\"language-text\">Occupation</code> 객체를 정참조 하고 있으므로, 속성 이름으로 바로 접근 할 수 있다. User1을 선택하여, 그 사람의 job을 찾아보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">user1 <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nuser1<span class=\"token punctuation\">.</span>job<span class=\"token punctuation\">.</span>name\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'Developer'</span></code></pre></div>\n<p>그러나 <code class=\"language-text\">Occupation</code> 객체는 <code class=\"language-text\">User</code> 객체를 역참조 하고 있으므로 바로 접근이 불가능하다. <code class=\"language-text\">developer</code> 이라는 <code class=\"language-text\">Occupation</code>을 가지고 있는 유저를 모두 찾아보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">job1   <span class=\"token operator\">=</span> Occupation<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'developer'</span><span class=\"token punctuation\">)</span>\npeople <span class=\"token operator\">=</span> job1<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 이게 될까?</span></code></pre></div>\n<p>❌ 안 됨 ❌</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;console>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\nAttributeError<span class=\"token punctuation\">:</span> <span class=\"token string\">'Occupation'</span> <span class=\"token builtin\">object</span> has no attribute <span class=\"token string\">'user'</span></code></pre></div>\n<p>그렇다고 절대로 사용하지 못하는 것은 절대 아니니 걱정하지말자. <strong>역참조 관계에 있을 때는 <code class=\"language-text\">[classname]_set</code> 이라는 속성을 사용하여 접근</strong>해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">job1   <span class=\"token operator\">=</span> Occupation<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\npeople <span class=\"token operator\">=</span> job1<span class=\"token punctuation\">.</span>user_set<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>QuerySet<span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>Object User Object<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>Object User Object<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></code></pre></div>\n<p>이 때, <code class=\"language-text\">user_set</code> 대신 사용할 수 있는 것이 <code class=\"language-text\">related_name</code>이다. 역참조 대상인 <code class=\"language-text\">user</code> 객체를 부를 이름.</p>\n<blockquote>\n<p>즉, <code class=\"language-text\">User</code> 클래스를 정의할 때, 정참조 하고 있는 <code class=\"language-text\">Occupation</code> 클래스의 인스턴스에서 어떤 명칭으로 거꾸로 호출당할 지 정해주는 이름인 것이다.</p>\n</blockquote>\n<h1 id=\"what-related-names-do\" style=\"position:relative;\"><a href=\"#what-related-names-do\" aria-label=\"what related names do permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What related names do</h1>\n<p>앞의 예시를 다시 보자. 아무래도 <code class=\"language-text\">Occupation</code>의 입장에서는 입사 지원자들을 <code class=\"language-text\">appliers</code>라고 부르는 것이 더 직관적이고 편할 것 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n    job\t <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'Occupation'</span><span class=\"token punctuation\">,</span>\n            on_delete    <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">,</span>\n            related_name <span class=\"token operator\">=</span> <span class=\"token string\">'appliers'</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span>Key Point !<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span>\n    created_at\t<span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now_add <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Occupation</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>[Key Point]</strong> 를 눈여겨 보자.\n<code class=\"language-text\">User</code>객체를 정의할 때, <code class=\"language-text\">job</code>이라는 속성에 <code class=\"language-text\">Occupation</code>객체가 연결되어 정참조하고 있다. <code class=\"language-text\">Occupation</code>객체의 인스턴스와 연결되어 있는 <code class=\"language-text\">User</code> 객체를 거꾸로 불러올 때, <code class=\"language-text\">appliers</code> 라는 이름으로 부르기 위해 <code class=\"language-text\">job</code> 속성에 <code class=\"language-text\">related_names = 'appliers'</code>를 함께 지정해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">job1   <span class=\"token operator\">=</span> Occupation<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\npeople <span class=\"token operator\">=</span> job1<span class=\"token punctuation\">.</span>appliers<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>QuerySet<span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>Object User Object<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>Object User Object<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></code></pre></div>\n<p>잘 동작하는 것을 알 수 있다. 모든 Foreign Key에 related<em>name을 붙여줄 필요는 없다. 때에 따라, 참조하고 있는 객체 이름에 `</em>set`을 붙이는 것이 더 직관적인 경우가 굉장히 많기 때문이다.</p>\n<h1 id=\"related-name이-필수인-경우가-있다\" style=\"position:relative;\"><a href=\"#related-name%EC%9D%B4-%ED%95%84%EC%88%98%EC%9D%B8-%EA%B2%BD%EC%9A%B0%EA%B0%80-%EC%9E%88%EB%8B%A4\" aria-label=\"related name이 필수인 경우가 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Related name이 필수인 경우가 있다.</h1>\n<p>바로 한 클래스에서 서로 다른 두 컬럼(속성)이 같은 테이블(클래스)를 참조하는 경우이다.\n앞서 설명한 상황에서, 지원자가 필수로 신청한 <code class=\"language-text\">occupation</code>외에, 2지망인 <code class=\"language-text\">occupation</code>도 받는다고 가정해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name       <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n    job\t       <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span><span class=\"token string\">'Occupation'</span><span class=\"token punctuation\">,</span> on_delete <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span><span class=\"token punctuation\">]</span> choice_2nd <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span><span class=\"token string\">'Occupation'</span><span class=\"token punctuation\">,</span> on_delete <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">,</span> null <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    created_at <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now_add <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Occupation</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<ul>\n<li>참고로 위와 같은 선언은 애초에 마이그레이션이 되지 않는다. related_name 지정하라는 문구만 뜸.</li>\n</ul>\n</blockquote>\n<p><code class=\"language-text\">User</code>객체에서 <code class=\"language-text\">Occupation</code>객체를 정참조 하는 속성이 두 개이다. 다시 말해 <code class=\"language-text\">developer</code>이라는 <code class=\"language-text\">Occupations</code>객체의 인스턴스를 1지망으로 선택한 지원자와 2지망으로 선택한 지원자가 따로 구별되어있다는 뜻이 된다. 아래 두 인스턴스를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">user1 <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Nick'</span><span class=\"token punctuation\">,</span> job_id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#developer</span>\nuser2 <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Sue'</span><span class=\"token punctuation\">,</span> job_id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> choice_2nd_id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">user1</code>은 1지망은 <code class=\"language-text\">job</code>으로 <code class=\"language-text\">id</code>가 <code class=\"language-text\">1</code>번인 <code class=\"language-text\">developer</code>이다.\n<code class=\"language-text\">user2</code>의 1지망은 <code class=\"language-text\">2</code>번 <code class=\"language-text\">job</code>이고, <strong>2지망</strong>이 <code class=\"language-text\">developer</code>이다.</p>\n<h3 id=\"이-때-related_name이-없다면\" style=\"position:relative;\"><a href=\"#%EC%9D%B4-%EB%95%8C-related_name%EC%9D%B4-%EC%97%86%EB%8B%A4%EB%A9%B4\" aria-label=\"이 때 related_name이 없다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이 때 related_name이 없다면?</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">job1 = Occupation.objects.get(id = 1)\njob1.user_set.all()</code></pre></div>\n<p>의 결과가 생성될 수 있을까?\n❌ 안 됨 ❌</p>\n<blockquote>\n<p><code class=\"language-text\">Occupation</code>객체를 정참조 하고 있는 컬럼이 <code class=\"language-text\">job</code>과<code class=\"language-text\">choice_2nd</code>두 개이므로, 그저 user_set이라는 속성만으로는 자신을 바라보고 있는 두 User 객체 가운데 어떤 속성에 접근해야할 지 알 수가 없기 때문이다. 즉, <code class=\"language-text\">developer</code>을 1지망으로 고른 사람들의 목록(<code class=\"language-text\">Nick</code>)을 가져와야할 지, 2지망으로 고른 사람들의 목록(<code class=\"language-text\">Sue</code>)을 가져와야할 지 알 수가 없기 때문이다.</p>\n</blockquote>\n<h3 id=\"바로-이럴-때-related_name이-필수인-것이다\" style=\"position:relative;\"><a href=\"#%EB%B0%94%EB%A1%9C-%EC%9D%B4%EB%9F%B4-%EB%95%8C-related_name%EC%9D%B4-%ED%95%84%EC%88%98%EC%9D%B8-%EA%B2%83%EC%9D%B4%EB%8B%A4\" aria-label=\"바로 이럴 때 related_name이 필수인 것이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>바로 이럴 때 related_name이 필수인 것이다.</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n    job\t <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'Occupation'</span><span class=\"token punctuation\">,</span>\n            on_delete    <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">,</span>\n            related_name <span class=\"token operator\">=</span> <span class=\"token string\">'appliers'</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span>Key Point !<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span>\n    choice_2nd  <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'Occupation'</span><span class=\"token punctuation\">,</span>\n            on_delete    <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">,</span>\n            null         <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n            related_name <span class=\"token operator\">=</span> <span class=\"token string\">'second_appliers'</span>\n        <span class=\"token punctuation\">)</span>\n    created_at\t<span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now_add <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>이제는 <code class=\"language-text\">developer</code>을 1지망으로 지원한 Nick과 2지망으로 지원한 Sue를 구분하여 호출할 수 있다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">job1 <span class=\"token operator\">=</span> Occupation<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\njob1<span class=\"token punctuation\">.</span>appliers<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>QuerySet<span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>Object User Object<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\"># ---> Nick</span>\n\njob1<span class=\"token punctuation\">.</span>second_appliers<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>QuerySet<span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>Object User Object<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\"># ---> Sue</span></code></pre></div>\n<blockquote>\n<h4 id=\"예시에서는-foreign-key만을-다루었는데-manytomany-관계에-있을-때에도-related_name은-같은-원리로-동작한다-헷갈리지-않게-주의하자\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C%EC%97%90%EC%84%9C%EB%8A%94-foreign-key%EB%A7%8C%EC%9D%84-%EB%8B%A4%EB%A3%A8%EC%97%88%EB%8A%94%EB%8D%B0-manytomany-%EA%B4%80%EA%B3%84%EC%97%90-%EC%9E%88%EC%9D%84-%EB%95%8C%EC%97%90%EB%8F%84-related_name%EC%9D%80-%EA%B0%99%EC%9D%80-%EC%9B%90%EB%A6%AC%EB%A1%9C-%EB%8F%99%EC%9E%91%ED%95%9C%EB%8B%A4-%ED%97%B7%EA%B0%88%EB%A6%AC%EC%A7%80-%EC%95%8A%EA%B2%8C-%EC%A3%BC%EC%9D%98%ED%95%98%EC%9E%90\" aria-label=\"예시에서는 foreign key만을 다루었는데 manytomany 관계에 있을 때에도 related_name은 같은 원리로 동작한다 헷갈리지 않게 주의하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시에서는 Foreign Key만을 다루었는데, ManyToMany 관계에 있을 때에도 related_name은 같은 원리로 동작한다. 헷갈리지 않게 주의하자.</h4>\n</blockquote>\n<h1 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h1>\n<p>웹의 구조나 서비스가 복잡해질 수록, 클래스 사이의 참조가 많아진다. 일대다는 물론이고, 다대다 관계도 계속 늘어난다. 그럴 때일 수록 related name이 중요하다고 생각한다. 어떻게든 migration만 되면 되지. 라는 생각으로 related_name을 마음대로 설정하다 보면, 나중엔 변수 이름을 아무렇게나 정했을 때만큼이나 의미를 알수 없는 코드를 양산하게 되기 때문이다.</p>\n<p>오늘도 많이 배웠다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%9D%B4-%EB%95%8C-related_name%EC%9D%B4-%EC%97%86%EB%8B%A4%EB%A9%B4\">이 때 related_name이 없다면?</a></li>\n<li><a href=\"#%EB%B0%94%EB%A1%9C-%EC%9D%B4%EB%9F%B4-%EB%95%8C-related_name%EC%9D%B4-%ED%95%84%EC%88%98%EC%9D%B8-%EA%B2%83%EC%9D%B4%EB%8B%A4\">바로 이럴 때 related_name이 필수인 것이다.</a></li>\n</ul>\n</div>","excerpt":"정참조와 역참조 객체 서로 호출하기 데이터베이스에서 두 테이블이 참조 관계에 있는 경우를 생각해보자. 예를 들어,  테이블과 사용자의 직업인  테이블이 있다. 두 테이블은 N:1 관계에 있으며,  객체가  객체를 참조하고 있다.  가  을 선택하여 입사 원서를 작성한다고 가정해보자.  객체는  객체를 정참조 하고 있으므로, 속성 이름으로 바로 접근 할 수 있다. User1을 선택하여, 그 사람의 job을 찾아보자. 그러나  객체는  객체를 역참조 하고 있으므로 바로 접근이 불가능하다.  이라는 을 가지고 있는 유저를 모두 찾아보자. ❌ 안 됨 ❌ 그렇다고 절대로 사용하지 못하는 것은 절대 아니니 걱정하지말자. 역참조 관계에 있을 때는  이라는 속성을 사용하여 접근해야한다. 이 때,  대신 사용할 수 있는 것이 이다. 역참조 대상인  객체를 부를 이름. 즉,  클래스를 정의할 때, 정참조 하고 있는  클래스의 인스턴스에서 어떤 명칭으로 거꾸로 호출당할 지 정해주는 이름인 것이다. W…","frontmatter":{"date":"June 14, 2020","title":"Django과 Reverse relation과 related_name","categories":"개발블로그","author":"이소헌","emoji":"👑"},"fields":{"slug":"/blog-20210614-Django-Related_name/"}},"next":null,"prev":{"id":"7882f326-ad58-5192-b3b3-68c56f71051e","html":"<h2 id=\"대체-폴더를-어떻게-해야-deploy가-되는걸까\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EC%B2%B4-%ED%8F%B4%EB%8D%94%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%B4%EC%95%BC-deploy%EA%B0%80-%EB%90%98%EB%8A%94%EA%B1%B8%EA%B9%8C\" aria-label=\"대체 폴더를 어떻게 해야 deploy가 되는걸까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대체 폴더를 어떻게 해야 deploy가 되는걸까</h2>\n<p>이걸 어떻게 해야 되는거지?</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EB%8C%80%EC%B2%B4-%ED%8F%B4%EB%8D%94%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%B4%EC%95%BC-deploy%EA%B0%80-%EB%90%98%EB%8A%94%EA%B1%B8%EA%B9%8C\">대체 폴더를 어떻게 해야 deploy가 되는걸까</a></li>\n</ul>\n</div>","frontmatter":{"date":"September 20, 2021","title":"아니 이거 왜 되냐고!2","categories":"블로그","author":"이소헌","emoji":"👑"},"fields":{"slug":"/blog-20210920/"}},"site":{"siteMetadata":{"siteUrl":"https://www.zoomkoding.com","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/blog-20210614-Django-Related_name/","nextSlug":"","prevSlug":"/blog-20210920/"}},"staticQueryHashes":["1073350324","2938748437"]}