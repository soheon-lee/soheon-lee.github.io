{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog-20210921-Exporting-module-part1/","result":{"data":{"cur":{"id":"8b826482-0327-5523-8c6a-849704c12b10","html":"<p>Node.js에서 모듈을 내보내고(export) 불러와서(import) 사용하는 방법을 다루는 글입니다. 네파트로 나뉘어있습니다.</p>\n<ul>\n<li>PART1 - module.exports (feat. CommonJS)</li>\n<li>PART2 - export/import with .mjs (feat. ES6)</li>\n<li>PART3 - { type: module }</li>\n<li>PART4 - export/import with babel (feat. prisma client)</li>\n</ul>\n<h2 id=\"가장-처음-알아야-하는-방법-moduleexports\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%9E%A5-%EC%B2%98%EC%9D%8C-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-moduleexports\" aria-label=\"가장 처음 알아야 하는 방법 moduleexports permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가장 처음 알아야 하는 방법 (module.exports)</h2>\n<p>Node.js 모듈 시스템에서는, 파일 한 개를 모듈 한 개로 생각한다. 따라서, 파일 하나를 모듈로 불러도 무방하다. ‘모듈이 파일이구나’ 라고 생각하고 접근하도록 하자.</p>\n<h3 id=\"변수를-내보내고-다른-모듈에서-불러오기\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98%EB%A5%BC-%EB%82%B4%EB%B3%B4%EB%82%B4%EA%B3%A0-%EB%8B%A4%EB%A5%B8-%EB%AA%A8%EB%93%88%EC%97%90%EC%84%9C-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0\" aria-label=\"변수를 내보내고 다른 모듈에서 불러오기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수를 내보내고, 다른 모듈에서 불러오기</h3>\n<ol>\n<li>\n<p>테스트를 위해 <code class=\"language-text\">JS_module_tutorial</code> 이라는 디렉토리를 하나 생성했다. 내부에는 파일 두개를 만든다.</p>\n<ul>\n<li><code class=\"language-text\">ex1_greetings.js</code> : 인사말을 변수로 저장해둔 모듈</li>\n<li><code class=\"language-text\">ex2_sayHello.js</code> : 인사하는 함수를 선언하고 실행할 모듈</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">ex1</code> 모듈에서 변수를 선언하고, 모듈 내부에서도 활용할 수 있도록 <code class=\"language-text\">module.exports</code>를 이용해 내보낸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ./ex1_greetings.js</span>\n<span class=\"token keyword\">const</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">'Hello! Nice to meet you, '</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> greeting<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>선언한 변수를 <code class=\"language-text\">ex2</code> 모듈에서 불러와 사용하고자 한다. 불러온 인사말을 활용하여 함수 <code class=\"language-text\">sayHello</code>를 선언하고, 적당한 argument와 함께 호출한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ./ex2_sayHello.js</span>\n<span class=\"token keyword\">const</span> greeting <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./ex1_greetings'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'greeting: '</span><span class=\"token punctuation\">,</span> greeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"greeting: Hello! Nice to meet you, \" 라는 텍스트가 나옴.</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> greeting <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'이워크'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 터미널에 \"Hello! Nice to meet you, 이워크'</span></code></pre></div>\n</li>\n<li>\n<p>터미널에서 <code class=\"language-text\">ex2</code> 파일을 실행시킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">node ex2_sayHello.js</code></pre></div>\n</li>\n</ol>\n<p>자 여기서 짚고 넘어가야 할 포인트는 사실 ex1_greeting파일을 불러올 때 호출 되는 대상이 <code class=\"language-text\">greeting</code> 이라는 변수 뿐이기 때문에, require 하는 파일 입장에서는 그 어떤 이름으로 불러와도 상관이 없다.</p>\n<p><code class=\"language-text\">ex2_sayHello.js</code> 파일에서 가장 첫 줄과 세번째 줄을 다음 코드와 같이 변경해도 정확하게 동일한 기능을 수행한다는 뜻이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ./ex2_sayHello.js</span>\n\n<span class=\"token keyword\">const</span> sentence <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./ex1_greetings'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> sentence <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'이워크'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그렇다면 <code class=\"language-text\">ex1_greetings.js</code> 모듈 내부에 변수와 함수가 여러개 있는 경우에는 어떨까?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ex1_greetings.js</span>\n\n<span class=\"token keyword\">const</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">'Hello! Nice to meet you, '</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> greeting2 <span class=\"token operator\">=</span> <span class=\"token string\">'I am very happy to see you again, '</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> greeting<span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> greeting2<span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 할 수는 없다. (덮어씌워지나?)\n한가지 방법은 아래와 같이 하나의 객체로 내보내는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  greeting<span class=\"token punctuation\">,</span>\n  greeting2<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 내보낸다면, 불러와서 사용하는 파일에서도 사용법이 조금 달라져야 한다. 그 전에 코드 수정하지 않고, 그대로 한 번 실행을 해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ./ex2_sayHello.js</span>\n\n<span class=\"token keyword\">const</span> sentence <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./ex1_greetings'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sentence: '</span><span class=\"token punctuation\">,</span> sentence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> sentence <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'이워크'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>콘솔에 <code class=\"language-text\">sentence</code>를 찍어보니 객체 형태 그대로 불러온 것을 알 수 있다. 따라서, 선언된 문구를 그대로 사용하고 싶다면 객체의 key를 활용해야만 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ./ex2_sayHello.js</span>\n\n<span class=\"token keyword\">const</span> sentence <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./ex1_greetings'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sentence: '</span><span class=\"token punctuation\">,</span> sentence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> sentence<span class=\"token punctuation\">.</span>greeting <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 또는</span>\n  <span class=\"token keyword\">return</span> sentence<span class=\"token punctuation\">.</span>greeting2 <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string\">'이워크'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>모듈을 불러올 때에도 <strong>구조분해할당</strong>을 할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> greeting<span class=\"token punctuation\">,</span> greeting2 <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./ex1_greetings'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GREETING: '</span><span class=\"token punctuation\">,</span> greeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GREETING2: '</span><span class=\"token punctuation\">,</span> greeting2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> greeting <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 또는</span>\n  <span class=\"token keyword\">return</span> greeting2 <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>단! 이때는 <code class=\"language-text\">greeting</code> 이나 <code class=\"language-text\">greeting2</code> 와 같은 이름이 무조건 동일하게 유지되어야 한다.</p>\n<hr>\n<p>이것이 Node.js가 가장 기본적으로 사용하는 CommonJS 문법 사용법이다. 모듈을 생성하고, 변수 또는 함수를 내보내거나 (export) 불러올 때 (require) 사용한다.</p>\n<p><code class=\"language-text\">module.exports</code> 문법과 그냥 <code class=\"language-text\">export</code> 문법의 차이점에서는 다음 글에서 짚어보도록 하겠다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EA%B0%80%EC%9E%A5-%EC%B2%98%EC%9D%8C-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-moduleexports\">가장 처음 알아야 하는 방법 (module.exports)</a></p>\n<ul>\n<li><a href=\"#%EB%B3%80%EC%88%98%EB%A5%BC-%EB%82%B4%EB%B3%B4%EB%82%B4%EA%B3%A0-%EB%8B%A4%EB%A5%B8-%EB%AA%A8%EB%93%88%EC%97%90%EC%84%9C-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0\">변수를 내보내고, 다른 모듈에서 불러오기</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"Node.js에서 모듈을 내보내고(export) 불러와서(import) 사용하는 방법을 다루는 글입니다. 네파트로 나뉘어있습니다. PART1 - module.exports (feat. CommonJS) PART2 - export/import with .mjs (feat. ES6) PART3 - { type: module } PART4 - export/import with babel (feat. prisma client) 가장 처음 알아야 하는 방법 (module.exports) Node.js 모듈 시스템에서는, 파일 한 개를 모듈 한 개로 생각한다. 따라서, 파일 하나를 모듈로 불러도 무방하다. ‘모듈이 파일이구나’ 라고 생각하고 접근하도록 하자. 변수를 내보내고, 다른 모듈에서 불러오기 테스트를 위해  이라는 디렉토리를 하나 생성했다. 내부에는 파일 두개를 만든다.  : 인사말을 변수로 저장해둔 모듈  : 인사하는 함수를 선언하고 실행할 모듈  모듈에서 변수를 선언하고, 모듈 내…","frontmatter":{"date":"September 21, 2021","title":"Node.js & Module - PART1 (module.exports)","categories":"개발블로그","author":"이워크","emoji":"👑"},"fields":{"slug":"/blog-20210921-Exporting-module-part1/"}},"next":{"id":"0ccab23e-028c-5d1c-a5e7-0c931d5865e8","html":"<h2 id=\"이번-겨울에-딸기를-한-번-팔아보겠습니다\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%88-%EA%B2%A8%EC%9A%B8%EC%97%90-%EB%94%B8%EA%B8%B0%EB%A5%BC-%ED%95%9C-%EB%B2%88-%ED%8C%94%EC%95%84%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"이번 겨울에 딸기를 한 번 팔아보겠습니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이번 겨울에 딸기를 한 번 팔아보겠습니다</h2>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%9D%B4%EB%B2%88-%EA%B2%A8%EC%9A%B8%EC%97%90-%EB%94%B8%EA%B8%B0%EB%A5%BC-%ED%95%9C-%EB%B2%88-%ED%8C%94%EC%95%84%EB%B3%B4%EA%B2%A0%EC%8A%B5%EB%8B%88%EB%8B%A4\">이번 겨울에 딸기를 한 번 팔아보겠습니다</a></li>\n</ul>\n</div>","frontmatter":{"date":"September 21, 2021","title":"딸기를 한 번 팔아보겠습니다.","categories":"개발블로그","author":"이워크","emoji":"🍓"},"fields":{"slug":"/blog-20210921-Sell-strawberry/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://www.zoomkoding.com","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/blog-20210921-Exporting-module-part1/","nextSlug":"/blog-20210921-Sell-strawberry/","prevSlug":""}},"staticQueryHashes":["1073350324","2938748437"]}