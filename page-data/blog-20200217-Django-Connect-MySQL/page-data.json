{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog-20200217-Django-Connect-MySQL/","result":{"data":{"cur":{"id":"d966eff6-89e9-59de-b7a5-1c82bc703b2a","html":"<p>Django에서는 기본 데이터 베이스로 sqlite3를 제공해준다. setting.py 파일을 보면 sqlite3에 대한 설정을 확인할 수 있다. 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">DATABASES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'default'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'ENGINE'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.db.backends.sqlite3'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>BASE_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'db.sqlite3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>나는 앞으로 MySQL을 사용할 것이기 때문에, 이 기본 정보를 바꾸고 Django-MySQL 조합을 완성하려 한다.</p>\n<hr>\n<h3 id=\"우분투-mysql-설치\" style=\"position:relative;\"><a href=\"#%EC%9A%B0%EB%B6%84%ED%88%AC-mysql-%EC%84%A4%EC%B9%98\" aria-label=\"우분투 mysql 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>우분투 MySQL 설치</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> -y mysql-server\n$ <span class=\"token function\">sudo</span> mysql_secure_installation\n<span class=\"token punctuation\">[</span>NO<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>최고관리자 password<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>Y:익명 사용자 제거<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>N:외부 로그인 허용<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>Y:테스트 데이터베이스 삭제<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>Y:privilege table 다시 로드<span class=\"token punctuation\">]</span></code></pre></div>\n<h3 id=\"환경-구성\" style=\"position:relative;\"><a href=\"#%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1\" aria-label=\"환경 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>환경 구성</h3>\n<p>django가 설치되어 있는 가상환경을 활성화한 뒤, <code class=\"language-text\">mysqlclient</code>를 설치한다. 이 라이브러리를 활용하여 연동할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pip <span class=\"token function\">install</span> mysqlclient</code></pre></div>\n<h5 id=\"우분투에서-mysqlclient-설치시-오류가-발생한다면\" style=\"position:relative;\"><a href=\"#%EC%9A%B0%EB%B6%84%ED%88%AC%EC%97%90%EC%84%9C-mysqlclient-%EC%84%A4%EC%B9%98%EC%8B%9C-%EC%98%A4%EB%A5%98%EA%B0%80-%EB%B0%9C%EC%83%9D%ED%95%9C%EB%8B%A4%EB%A9%B4\" aria-label=\"우분투에서 mysqlclient 설치시 오류가 발생한다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>우분투에서 mysqlclient 설치시 오류가 발생한다면,</h5>\n<p style=\"background-color:pink; padding:5px\">Command \"python setup.py egg_info\" failed with error code 1 in /tmp/pip-install-zbw18e9_/mysqlclient/  </p>\n<p>이런 에러.<br>\n또는,</p>\n<p style=\"background-color:pink; padding:5px\">/bin/sh: 1: mysql_config: not found  </p>\n<p>이런 에러.<br>\n이때,</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> libmysqlclient-dev</code></pre></div>\n<p>다시</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> mysqlclient</code></pre></div>\n<h3 id=\"mysql에-데이터베이스-생성\" style=\"position:relative;\"><a href=\"#mysql%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%83%9D%EC%84%B1\" aria-label=\"mysql에 데이터베이스 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MySQL에 데이터베이스 생성</h3>\n<p>현재 프로젝트에서 이용할 데이터베이스를 MySQL 내부에 만들어주자. starbucks 라는 데이터 베이스를 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> starbucks <span class=\"token keyword\">character</span> <span class=\"token keyword\">set</span> utf8mb4 <span class=\"token keyword\">collate</span> utf8mb4_general_ci<span class=\"token punctuation\">;</span>\nQuery OK<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token keyword\">row</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.01</span> sec<span class=\"token punctuation\">)</span></code></pre></div>\n<p>character set utf8mb4 - 한글 사용 활성화</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">use</span> starbucks\n<span class=\"token keyword\">Database</span> changed\nmysql<span class=\"token operator\">></span> <span class=\"token keyword\">show</span> <span class=\"token keyword\">tables</span><span class=\"token punctuation\">;</span>\nEmpty <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span></code></pre></div>\n<p>지금은 아무 테이블도 없지만, 앞으로 이것 저것 넣으면 된다.</p>\n<h5 id=\"-데이터베이스-삭제하려면\" style=\"position:relative;\"><a href=\"#-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%82%AD%EC%A0%9C%ED%95%98%EB%A0%A4%EB%A9%B4\" aria-label=\" 데이터베이스 삭제하려면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❔ 데이터베이스 삭제하려면</h5>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">DROP DATABASE &lt;database_name></code></pre></div>\n<h3 id=\"django-mysql-연동\" style=\"position:relative;\"><a href=\"#django-mysql-%EC%97%B0%EB%8F%99\" aria-label=\"django mysql 연동 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django-MySQL 연동</h3>\n<p>여태 settings.py에 모든 정보를 몰아서 저장했지만, 지금부터는 my_settings.py라는 새로운 파일에 민감한 정보들을 따로 저장해두고, settings.py에서 import 해서 사용할 것이다.</p>\n<blockquote>\n<p class=\"quote\" style=\"max-width: 100%; padding:10px; border-left:solid 3px gray; text-align:left\"> my_settings.py 파일은 외부와 공유할 일이 없는 정보이기 때문에 .gitignore이라는 숨김 파일에 이름을 등록하여 github에 업로드 되지 않도록 만들어야 한다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> my_settings.py</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">DATABASES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'default'</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'ENGINE'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.db.backends.mysql'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'starbucks'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'USER'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'PASSWORD'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'HOST'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'PORT'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3306'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">my_settings.py</code>파일이 완성되었다. 그럼 진짜 <code class=\"language-text\">setting.py</code>파일에서 import하러 가자!</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> settings.py</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> my_settings\n\nDATABASES <span class=\"token operator\">=</span> my_settings<span class=\"token punctuation\">.</span>DATABASES</code></pre></div>\n<p>모든 설정을 수정하였다면 데이터베이스에 테이블을 만들어줘야한다. <code class=\"language-text\">./manage.py migrate</code></p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">use</span> starbucks\nmysql<span class=\"token operator\">></span> <span class=\"token keyword\">show</span> <span class=\"token keyword\">tables</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">장고_어쩌구</code> 세 테이블과, 내가 starbucks_menu.models에 만들어 둔 클래스에 해당하는 표들이 보인다.</p>\n<hr>\n<p>이제 쓰면 된다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%9A%B0%EB%B6%84%ED%88%AC-mysql-%EC%84%A4%EC%B9%98\">우분투 MySQL 설치</a></li>\n<li>\n<p><a href=\"#%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1\">환경 구성</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%EC%9A%B0%EB%B6%84%ED%88%AC%EC%97%90%EC%84%9C-mysqlclient-%EC%84%A4%EC%B9%98%EC%8B%9C-%EC%98%A4%EB%A5%98%EA%B0%80-%EB%B0%9C%EC%83%9D%ED%95%9C%EB%8B%A4%EB%A9%B4\">우분투에서 mysqlclient 설치시 오류가 발생한다면,</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#mysql%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%83%9D%EC%84%B1\">MySQL에 데이터베이스 생성</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%82%AD%EC%A0%9C%ED%95%98%EB%A0%A4%EB%A9%B4\">❔ 데이터베이스 삭제하려면</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#django-mysql-%EC%97%B0%EB%8F%99\">Django-MySQL 연동</a></li>\n</ul>\n</div>","excerpt":"Django에서는 기본 데이터 베이스로 sqlite3를 제공해준다. setting.py 파일을 보면 sqlite3에 대한 설정을 확인할 수 있다. 아래와 같다. 나는 앞으로 MySQL을 사용할 것이기 때문에, 이 기본 정보를 바꾸고 Django-MySQL 조합을 완성하려 한다. 우분투 MySQL 설치 환경 구성 django가 설치되어 있는 가상환경을 활성화한 뒤, 를 설치한다. 이 라이브러리를 활용하여 연동할 것이다. 우분투에서 mysqlclient 설치시 오류가 발생한다면, 이런 에러. 또는, 이런 에러. 이때, 다시 MySQL에 데이터베이스 생성 현재 프로젝트에서 이용할 데이터베이스를 MySQL 내부에 만들어주자. starbucks 라는 데이터 베이스를 생성한다. character set utf8mb4 - 한글 사용 활성화 지금은 아무 테이블도 없지만, 앞으로 이것 저것 넣으면 된다. ❔ 데이터베이스 삭제하려면 Django-MySQL 연동 여태 settings.py에 모든 정보…","frontmatter":{"date":"February 17, 2020","title":"Django에 MySQL 연결하여 데이터 저장하기","categories":"개발블로그","author":"이소헌","emoji":"👑"},"fields":{"slug":"/blog-20200217-Django-Connect-MySQL/"}},"next":null,"prev":{"id":"48033b56-2d2b-53fd-bec9-87884337a950","html":"<h1 id=\"사전-연습---text-streaming\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%A0%84-%EC%97%B0%EC%8A%B5---text-streaming\" aria-label=\"사전 연습   text streaming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사전 연습 - text streaming</h1>\n<p>음악 스트리밍 웹인 TIDAL을 클론하기 위해서는 음악 스트리밍 기능을 구현하는 것이 가장 중요하다. 음악 스트리밍을 위해서 사전 연습으로 우선 텍스트 스트리밍을 먼저 해보려고 한다.</p>\n<p>과정은 아래와 같다.</p>\n<ol>\n<li>파일 이름을 path parameter로 받기</li>\n<li>해당하는 파일을 불러내기</li>\n<li>그 파일 속에 문구를 streaming으로 보내기</li>\n</ol>\n<h2 id=\"파일-준비\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%A4%80%EB%B9%84\" aria-label=\"파일 준비 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일 준비</h2>\n<p>내가 준비한 파일은 text_sample이라는 단순 텍스트 파일이다. 파일 내부에는 볼빨간 사춘기 - 별 보러 갈래 의 가사가 담겨있다.</p>\n<details markdown=\"1\">\n  <summary> text_sample </summary>\n  Maybe it's like a dream  \n  I see the stars over me  \n  Maybe it's like a magic  \n  I know you, you, you're my star  \n  Saturday night 재미없는 얘기  \n  No beer, no cheers 우리 둘만 여기  \n  재미없는 사람끼리 눈이 맞았나 봐  \n  You've heard of my songs  \n  어떤 별을 가장 좋아하냐며  \n  미소를 띠고 내게 말해  \n  별 보러 갈래?  \n  Listen to our favorite songs  \n  좋아하는 노랠 듣고  \n  웃고 떠들다 보면  \n  We drive away  \n  어느새 멋진 바다  \n  위로 별들이 쏟아져내려  \n  Can't you see the stars?\n  They called it milky way 쏟아져 머리 위로\n  넌 나를 업고 모래사장을 뛰어다녀, yeah\n  그중 가장 예쁜 저 별을 찾아서\n  밤이 새도록 뛰어다니고\n  Stars are over me\n  Maybe I know the name\n  I see the stars over me\n  Maybe you got a planet\n  I know you, you got my star\n  Everyday night 매일 같은 얘기\n  No feeling, no chilling 우리 둘만 여기\n  재미없는 사람끼리 눈이 맞았나 봐\n  You've heard of my songs\n  어떤 별을 가장 좋아하냐며\n  미소를 띠고 내게 말해\n  별 보러 갈래?\n  Listen to our favorite songs\n  좋아하는 노랠 듣고\n  웃고 떠들다 보면\n  We drive away\n  어느새 멋진 바다\n  위로 별들이 쏟아져내려\n  Can't you see the stars?\n  모래 위에 누워서\n  저 별을 다 세보다가\n  아름다웠던 우리 이 순간을\n  저 별에 담아서\n  We fell in love\n  See the star\n  Be your star, yeah, yeah\n  They called it milky way 쏟아져 머리 위로\n  넌 나를 업고 모래사장을 뛰어다녀, yeah\n  그중 가장 예쁜 저 별을 찾아서\n  밤이 새도록 뛰어다니고\n  Stars are over me\n</details>\n<h2 id=\"viewspy-내부-로직\" style=\"position:relative;\"><a href=\"#viewspy-%EB%82%B4%EB%B6%80-%EB%A1%9C%EC%A7%81\" aria-label=\"viewspy 내부 로직 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>views.py 내부 로직</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http  <span class=\"token keyword\">import</span> StreamingHttpResponse\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">StreamTextView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n          in_file <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'file_name'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>   stream    <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>iteration<span class=\"token punctuation\">(</span>in_file<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>   response  <span class=\"token operator\">=</span> StreamingHttpResponse<span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> content_type <span class=\"token operator\">=</span> <span class=\"token string\">'text/event-stream'</span><span class=\"token punctuation\">)</span>\n          response<span class=\"token punctuation\">[</span><span class=\"token string\">'Cache-Control'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'no-cache'</span>\n\n          <span class=\"token keyword\">return</span> response\n\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> identifier<span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>identifier<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>   <span class=\"token keyword\">def</span> <span class=\"token function\">iteration</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> in_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>in_file<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb+'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            c <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> c<span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>       <span class=\"token keyword\">yield</span> c\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n              <span class=\"token keyword\">break</span></code></pre></div>\n<ul>\n<li>[1] HttpResponse, JsonResponse 외에도 <strong>StreamingHttpResponse</strong> 를 import 한다.</li>\n<li>[2] query string 으로 받은 in_file에서 내부 내용을 가져오는 과정을 처리한다.</li>\n<li>[3] 처리해서 받은 내부 내용을 <strong>response</strong>에 담아 return</li>\n</ul>\n<p><strong>[2]의 과정을 좀 더 자세히 보자.</strong></p>\n<ul>\n<li>iteration이라는 함수는 [4]에 있는데, in_file이라는 파일을 f 라는 이름으로 연다.</li>\n<li>c = f.read()로 읽은 문장을 할당한다.</li>\n<li>문장 c 가 있으면 <code class=\"language-text\">yield c</code></li>\n<li>yield 한 문장이 [2] stream 변수에, 분할되어 (스트리밍되어) 할당되는 것이다.</li>\n</ul>\n<h2 id=\"yield\" style=\"position:relative;\"><a href=\"#yield\" aria-label=\"yield permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>yield?</h2>\n<p>우선 <code class=\"language-text\">return</code>과 마찬가지로 함수의 결과를 반환하는 역할을 한다. 그렇다면 차이점은 무엇일까?</p>\n<blockquote>\n<p><strong><span style=\"color:darkblue; background-color:beige; padding:2px;\">Return</span></strong> sends a specified value back to its caller whereas <strong><span style=\"color:green; background-color:beige; padding:2px;\">Yield</span></strong> can produce a sequence of values. We should use yield when we want to iterate over a sequence, but don’t want to store the entire sequence in memory. <a href=\"https://www.geeksforgeeks.org/use-yield-keyword-instead-return-keyword-python/\">reference</a></p>\n</blockquote>\n<p>즉, return은 결과를 한 번에 반환하고, yield는 결과의 시퀀스를 반환하여, 결과를 순회하여 응용할 때 사용하면 된다. 따라서, yield를 사용하면 파이썬 함수를 제너레이터로 사용할 수 있게 된다.</p>\n<p>스트리밍은, <strong>결과를 연쇄적으로 반환하는 과정</strong>이기 때문에 yield를 쓰는 것이다.</p>\n<h2 id=\"결과\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B3%BC\" aria-label=\"결과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결과</h2>\n<p>실행시켜보자</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">http -v <span class=\"token number\">10.58</span>.2.53:8001/music/text?file_name<span class=\"token operator\">=</span>text_sample</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Maybe it<span class=\"token string\">'s like a dream\nI see the stars over me\nMaybe it'</span>s like a magic\nI know you, you, you<span class=\"token string\">'re my star\nSaturday night ì¬ë¯¸ìë ì\n                           ë¡ ë³\n                                 ë¤ì´ ìì\n                                            ì ¸ë´ë ¤\nCan'</span>t you see the stars?\nThey called it milky way ìì\n                             ì ¸ ë¨¸ë¦¬ ì\n                                          ë¡\në\n  ë ì  ë³\n            ì\n               ì°¾ì\n                    ì\n                     \në°¤ì´ ìë\n          ë¡ ë°ì´ë¤ëê³ \nStars are over me\nMaybe I know the name\nI see the stars over me\nMaybe you got a planet\nI know you, you got my star\nEveryday night ë§¤ì¼ ê°ì ì\n                              ë¡ ë³\n                                    ë¤ì´ ìì\n                                               ì ¸ë´ë ¤</code></pre></div>\n<p>한글이 왜 이렇게까지 깨지는 지는 참 의문이다 ;;</p>\n<h1 id=\"본편---음악-파일\" style=\"position:relative;\"><a href=\"#%EB%B3%B8%ED%8E%B8---%EC%9D%8C%EC%95%85-%ED%8C%8C%EC%9D%BC\" aria-label=\"본편   음악 파일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>본편 - 음악 파일</h1>\n<p>다행히, text file을 음악 파일로 바꿔주기만 하면 된다.<br>\n대신 쿼리 스트링으로 음악 파일이 아닌 음악의 track_id를 받아와서, 그 track의 url로 연결지어 줄 것이다.</p>\n<h2 id=\"viewspy\" style=\"position:relative;\"><a href=\"#viewspy\" aria-label=\"viewspy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>views.py</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StreamTextView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            track_id    <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'track_id'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n            track       <span class=\"token operator\">=</span> Track<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> track_id<span class=\"token punctuation\">)</span>\n            music_url   <span class=\"token operator\">=</span> track<span class=\"token punctuation\">.</span>music_url\n            stream      <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>iteration<span class=\"token punctuation\">(</span>music_url<span class=\"token punctuation\">)</span>\n            response    <span class=\"token operator\">=</span> StreamingHttpResponse<span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> content_type <span class=\"token operator\">=</span> <span class=\"token string\">'text/event-stream'</span><span class=\"token punctuation\">)</span>\n            response<span class=\"token punctuation\">[</span><span class=\"token string\">'Cache-Control'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'no-cache'</span>\n\n            <span class=\"token keyword\">return</span> response\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> identifier<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>indentifier<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">iteration</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> music_url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>music_url<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb+'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n                c <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> c<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">yield</span> c\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">break</span></code></pre></div>\n<h2 id=\"결과-1\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B3%BC-1\" aria-label=\"결과 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결과</h2>\n<p>실행시켜 보자</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">http -v <span class=\"token number\">10.58</span>.2.53:8001/music/text?track_id<span class=\"token operator\">=</span><span class=\"token number\">1</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">GET /music/text?track_id<span class=\"token operator\">=</span><span class=\"token number\">1</span> HTTP/1.1\nAccept: */*\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nHost: <span class=\"token number\">10.58</span>.2.53:8001\nUser-Agent: HTTPie/2.1.0-dev\n\n\n\nHTTP/1.1 <span class=\"token number\">200</span> OK\nCache-Control: no-cache\nConnection: close\nContent-Type: text/event-stream\nDate: Sun, <span class=\"token number\">15</span> Mar <span class=\"token number\">2020</span> <span class=\"token number\">13</span>:37:17 GMT\nServer: WSGIServer/0.2 CPython/3.7.4\nVary: Origin\nX-Content-Type-Options: nosniff\nX-Frame-Options: DENY\n\n\n\n+-----------------------------------------+\n<span class=\"token operator\">|</span> NOTE: binary data not shown <span class=\"token keyword\">in</span> terminal <span class=\"token operator\">|</span>\n+-----------------------------------------+</code></pre></div>\n<h2 id=\"\" style=\"position:relative;\"><a href=\"#\" aria-label=\" permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>????</h2>\n<p>바이너리 파일을 터미널에서 볼 수 없다고 ??</p>\n<h2 id=\"해결\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0\" aria-label=\"해결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">http -v <span class=\"token number\">10.58</span>.2.53:8001/music/text?track_id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">></span> a\n\nxxd a\nxxd -b a</code></pre></div>\n<p>이러면 된다 ~</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">00113ff0: <span class=\"token number\">2240</span> 33c5 07b6 18e4 be3c ce1f 82f5 b8ee  .@3<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\n00114000: 33dc dda5 d286 eec1 da0b b747 7afb <span class=\"token number\">6792</span>  <span class=\"token number\">3</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>Gz.g.\n00114010: <span class=\"token number\">3207</span> 51df <span class=\"token number\">8021</span> d97e e451 66e7 <span class=\"token number\">1383</span> db78  <span class=\"token number\">2</span>.Q<span class=\"token punctuation\">..</span><span class=\"token operator\">!</span>.~.Qf<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>x\n00114020: 02cc 6a0e <span class=\"token number\">8252</span> b149 ca1a e261 c3cc b3b2  <span class=\"token punctuation\">..</span>j<span class=\"token punctuation\">..</span>R.I<span class=\"token punctuation\">..</span>.a<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\n00114030: f9eb 52d8 f41d <span class=\"token number\">3300</span> f6f7 cb7f e8a2 561c  <span class=\"token punctuation\">..</span>R<span class=\"token punctuation\">..</span>.3<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.V.\n00114040: 7bfc <span class=\"token number\">4874</span> <span class=\"token number\">5375</span> dafb 0347 f975 1d34 bf17  <span class=\"token punctuation\">{</span>.HtSu<span class=\"token punctuation\">..</span>.G.u.4<span class=\"token punctuation\">..</span>\n00114050: deac d4b6 3f94 426a 397f b2aa b24b 13dd  <span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>?.Bj9<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>K<span class=\"token punctuation\">..</span>\n00114060: 0843 a9c5 d8cb <span class=\"token number\">2725</span> f108 729a <span class=\"token number\">3135</span> <span class=\"token number\">3365</span>  .C<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>w%<span class=\"token punctuation\">..</span>r.153e\n00114070: f6a7 a94d 7e53 4b86 78fe afd0 d9b9 6a8a  <span class=\"token punctuation\">..</span>.M~SK.x<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.j.\n00114080: 1f95 ddaf da96 2c75 f88d 2e46 0916 600a  <span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>,u<span class=\"token punctuation\">..</span>.F<span class=\"token punctuation\">..</span>b.\n00114090: e21e <span class=\"token number\">6190</span> 23f2 b0ec 9e05 676e ffff ffe0  <span class=\"token punctuation\">..</span>a.<span class=\"token comment\">#.....gn....</span>\n001140a0: 40c4 bbd6 0000 6e09 <span class=\"token number\">8044</span> 0a60 46e3 <span class=\"token number\">4514</span>  @<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.n<span class=\"token punctuation\">..</span>D<span class=\"token punctuation\">..</span>F.E.\n001140b0: <span class=\"token number\">8931</span> <span class=\"token number\">2921</span> a89b 82da d05a ec0d <span class=\"token number\">9032</span> f03c  .1<span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.Z<span class=\"token punctuation\">..</span>.2.<span class=\"token operator\">&lt;</span>\n001140c0: 483a 0116 <span class=\"token number\">1734</span> 2c12 0c23 <span class=\"token number\">9960</span> 0a9a a051  H:<span class=\"token punctuation\">..</span>.4,<span class=\"token punctuation\">..</span><span class=\"token comment\">#.`...Q</span>\n001140d0: 0018 3c01 0003 <span class=\"token number\">8680</span> <span class=\"token number\">9181</span> <span class=\"token number\">8587</span> ed9c 04a8  <span class=\"token punctuation\">..</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.\n001140e0: 90b8 808a <span class=\"token number\">7397</span> bc15 1ab8 <span class=\"token number\">5410</span> 7cd3 0444  <span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>s<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.T.<span class=\"token operator\">|</span><span class=\"token punctuation\">..</span>D\n001140f0: be31 <span class=\"token number\">9553</span> 30e4 <span class=\"token number\">4687</span> 5e69 <span class=\"token number\">8984</span> 80d7 31d8  .1.S0.F.^i<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token number\">1</span>.\n00114100: <span class=\"token number\">8042</span> 0597 a243 1b7f 648c 8d60 <span class=\"token number\">9219</span> a734  .B<span class=\"token punctuation\">..</span>.C<span class=\"token punctuation\">..</span>d<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token number\">4</span>\n00114110: 976e 1c7d e34b b16a 060b <span class=\"token number\">6772</span> a809 f3ca  .n.<span class=\"token punctuation\">}</span>.K.j<span class=\"token punctuation\">..</span>gr<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\n00114120: 8a18 6dda b3b7 2ad4 adef 985c 8f24 <span class=\"token number\">3701</span>  <span class=\"token punctuation\">..</span>m<span class=\"token punctuation\">..</span>.*<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">\\</span>.<span class=\"token variable\">$7</span><span class=\"token builtin class-name\">.</span>\n00114130: 5d9d 87e3 709a 96ea c5e5 1f04 <span class=\"token number\">6715</span> 5d0e  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">..</span>.p<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.g.<span class=\"token punctuation\">]</span>.\n00114140: <span class=\"token number\">7431</span> <span class=\"token number\">1853</span> <span class=\"token number\">7913</span> b96e <span class=\"token number\">4953</span> 1d53 ea17 279f  t1.Sy<span class=\"token punctuation\">..</span>nIS.S<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\n00114150: a3a2 a09d 92c3 f632 75e6 3d73 aa79 e6de  <span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.2u.<span class=\"token operator\">=</span>s.y<span class=\"token punctuation\">..</span>\n00114160: 65af c429 e293 ecbe <span class=\"token number\">3120</span> dbf9 25ff fbe0  e<span class=\"token punctuation\">..</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token number\">1</span> <span class=\"token punctuation\">..</span>%<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p><strong>10.58.2.53:8001/music/text?track_id=1</strong><br>\n이걸 chrome 주소창에 입력하면, 크롬 브라우저가 binary를 읽어서 파일을 재생시켜줌 !</p>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%A4%80%EB%B9%84\">파일 준비</a></li>\n<li><a href=\"#viewspy-%EB%82%B4%EB%B6%80-%EB%A1%9C%EC%A7%81\">views.py 내부 로직</a></li>\n<li><a href=\"#yield\">yield?</a></li>\n<li><a href=\"#%EA%B2%B0%EA%B3%BC\">결과</a></li>\n<li><a href=\"#viewspy\">views.py</a></li>\n<li><a href=\"#%EA%B2%B0%EA%B3%BC-1\">결과</a></li>\n<li><a href=\"#\">????</a></li>\n<li><a href=\"#%ED%95%B4%EA%B2%B0\">해결</a></li>\n</ul>\n</div>","frontmatter":{"date":"March 15, 2020","title":"Django로 스트리밍 하기 part1 - binary streaming","categories":"개발블로그","author":"이소헌","emoji":"👑"},"fields":{"slug":"/blog-20200315-Django-Streaming-Part1/"}},"site":{"siteMetadata":{"siteUrl":"https://www.zoomkoding.com","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/blog-20200217-Django-Connect-MySQL/","nextSlug":"","prevSlug":"/blog-20200315-Django-Streaming-Part1/"}},"staticQueryHashes":["1073350324","2938748437"]}