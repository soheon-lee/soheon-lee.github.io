{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog-20200315-Django-Streaming-Part2/","result":{"data":{"cur":{"id":"e56d1a5e-b653-5b22-8f18-06573b9cb420","html":"<h1 id=\"중간부터-스트리밍\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EA%B0%84%EB%B6%80%ED%84%B0-%EC%8A%A4%ED%8A%B8%EB%A6%AC%EB%B0%8D\" aria-label=\"중간부터 스트리밍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중간부터 스트리밍</h1>\n<p>이전에 작성했던 스트리밍 코드는 아래와 같다.</p>\n<h3 id=\"viewspy\" style=\"position:relative;\"><a href=\"#viewspy\" aria-label=\"viewspy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>views.py</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StreamTextView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            track_id    <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'track_id'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n            track       <span class=\"token operator\">=</span> Track<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> track_id<span class=\"token punctuation\">)</span>\n            music_url   <span class=\"token operator\">=</span> track<span class=\"token punctuation\">.</span>music_url\n            stream      <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>iteration<span class=\"token punctuation\">(</span>music_url<span class=\"token punctuation\">)</span>\n            response    <span class=\"token operator\">=</span> StreamingHttpResponse<span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> content_type <span class=\"token operator\">=</span> <span class=\"token string\">'text/event-stream'</span><span class=\"token punctuation\">)</span>\n            response<span class=\"token punctuation\">[</span><span class=\"token string\">'Cache-Control'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'no-cache'</span>\n\n            <span class=\"token keyword\">return</span> response\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> identifier<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>indentifier<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">iteration</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> music_url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>music_url<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb+'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n                c <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> c<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">yield</span> c\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">break</span></code></pre></div>\n<p>프론트에 fetch url 을 주고, 그 URL이 호출될 때 위 클래스가 실행되면 노래가 저절로 재생되었다. 그러나 지금 코드로는 노래를 오로지 처음부터만 재생할 수 있다. 중간부터 재생하려고 재생막대 그 어딘가를 누르게되면, 다시 fetch url을 호출하는 과정이 되기 때문에 다시 노래가 처음부터 시작된다.</p>\n<p><strong>행복하지 않다.</strong></p>\n<h2 id=\"첫번째-시도\" style=\"position:relative;\"><a href=\"#%EC%B2%AB%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84\" aria-label=\"첫번째 시도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>첫번째 시도,</h2>\n<p>파일을 읽어오는 부분인 <code class=\"language-text\">c = f.read()</code> 부분에 어디서 읽을지 시작부분을 넣어주는 방법이다. <code class=\"language-text\">c = f.read(sample_rate * second)</code> 의 형태이다. 여기서 sample rate란 음악 파일에서 초당 읽어오는 데이터의 양이다. 따라서 시작하고자 하는 위치를 초(second)의 형태로 곱해주면, 파일에서 내가 시작하고자 하는 부분부터 읽어올 수 있기 때문이다.<br>\nsample rate는 음악별로 다르지만, jamendo 홈페이지에서 다운받은 무료 음원의 sample rate은 거의 모두 22050이었다.</p>\n<h3 id=\"결과-1\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B3%BC-1\" aria-label=\"결과 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결과 1</h3>\n<p>반만 성공함. 프론트엔드에서 지정한 위치를 따로 설정해서 받아오는 것은 작동하지 않았고, second = 70 (초)로 설정해두면, 매번 70초의 위치에서 노래가 시작되기만 했다 ㅋㅋㅋ</p>\n<h2 id=\"두번째-시도\" style=\"position:relative;\"><a href=\"#%EB%91%90%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84\" aria-label=\"두번째 시도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>두번째 시도,</h2>\n<p>위에 입력한 코드의 <code class=\"language-text\">response</code>에 다른 attribute를 추가해주었다.</p>\n<ol>\n<li>response[‘Accept-Ranges’] = ‘bytes’</li>\n<li>response[‘Content-Length’] = len(open(‘media/‘+music_file, ‘rb’).read())</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MusicStreamingView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        track_id    <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'track_id'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n        start_sec   <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'start_sec'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> track_id<span class=\"token punctuation\">:</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>track_id<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>Track<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>track_id<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'INVALID_KEY'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n            track       <span class=\"token operator\">=</span> Track<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> track_id<span class=\"token punctuation\">)</span>\n            music_file  <span class=\"token operator\">=</span> track<span class=\"token punctuation\">.</span>music_url\n            stream      <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>iteration<span class=\"token punctuation\">(</span><span class=\"token string\">'media/'</span><span class=\"token operator\">+</span>music_file<span class=\"token punctuation\">)</span>\n            response    <span class=\"token operator\">=</span> StreamingHttpResponse<span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n            response<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span>        <span class=\"token operator\">=</span> <span class=\"token string\">'audio/mpeg'</span>\n            response<span class=\"token punctuation\">[</span><span class=\"token string\">'Accept-Ranges'</span><span class=\"token punctuation\">]</span>       <span class=\"token operator\">=</span> <span class=\"token string\">'bytes'</span>\n            response<span class=\"token punctuation\">[</span><span class=\"token string\">'Cache-Control'</span><span class=\"token punctuation\">]</span>       <span class=\"token operator\">=</span> <span class=\"token string\">'no-cache'</span>\n            response<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Length'</span><span class=\"token punctuation\">]</span>      <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'media/'</span><span class=\"token operator\">+</span>music_file<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            response<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Disposition'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'filename = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>music_file<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span>\n\n            <span class=\"token keyword\">return</span> response\n\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'INVALID_KEYWORD'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">iteration</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> file_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb+'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n           <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n                content <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> content<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">yield</span> content\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">break</span></code></pre></div>\n<h3 id=\"결과-2\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B3%BC-2\" aria-label=\"결과 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결과 2</h3>\n<p>성공성공~</p>\n<h1 id=\"음악-파일-unit-test\" style=\"position:relative;\"><a href=\"#%EC%9D%8C%EC%95%85-%ED%8C%8C%EC%9D%BC-unit-test\" aria-label=\"음악 파일 unit test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>음악 파일 unit test</h1>\n<p>요즘 개발과 동시에 유닛테스트를 진행하고 있다. 일반 <code class=\"language-text\">HttpResponse</code> 나 <code class=\"language-text\">JssonResponse</code>와는 달리 Streaming music은 어떻게 unit test를 할까?</p>\n<p>우선은 지정해둔 내부 속성들이 다 잘 전달되었는지로 확인하기로 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">response<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Disposition'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'filename  = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>music_file<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span></code></pre></div>\n<p>이렇게 추가해두고, test.py 파일은 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StreamingTest</span><span class=\"token punctuation\">(</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n     <span class=\"token keyword\">def</span> <span class=\"token function\">test_streaming_get_success</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n         client <span class=\"token operator\">=</span> Client<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'/music/track?track_id=1'</span><span class=\"token punctuation\">)</span>\n         self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>\n             <span class=\"token string\">'Content-Disposition'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n             <span class=\"token string\">\"filename = DR_GROOVE_GANG_-_A_l_ancienne.mp3\"</span>\n         <span class=\"token punctuation\">)</span>\n         self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>우선 여기까지로 타협 !</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<ul>\n<li><a href=\"#viewspy\">views.py</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B2%AB%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84\">첫번째 시도,</a></p>\n<ul>\n<li><a href=\"#%EA%B2%B0%EA%B3%BC-1\">결과 1</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%91%90%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84\">두번째 시도,</a></p>\n<ul>\n<li><a href=\"#%EA%B2%B0%EA%B3%BC-2\">결과 2</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"중간부터 스트리밍 이전에 작성했던 스트리밍 코드는 아래와 같다. views.py 프론트에 fetch url 을 주고, 그 URL이 호출될 때 위 클래스가 실행되면 노래가 저절로 재생되었다. 그러나 지금 코드로는 노래를 오로지 처음부터만 재생할 수 있다. 중간부터 재생하려고 재생막대 그 어딘가를 누르게되면, 다시 fetch url을 호출하는 과정이 되기 때문에 다시 노래가 처음부터 시작된다. 행복하지 않다. 첫번째 시도, 파일을 읽어오는 부분인  부분에 어디서 읽을지 시작부분을 넣어주는 방법이다.  의 형태이다. 여기서 sample rate란 음악 파일에서 초당 읽어오는 데이터의 양이다. 따라서 시작하고자 하는 위치를 초(second)의 형태로 곱해주면, 파일에서 내가 시작하고자 하는 부분부터 읽어올 수 있기 때문이다. sample rate는 음악별로 다르지만, jamendo 홈페이지에서 다운받은 무료 음원의 sample rate은 거의 모두 22050이었다. 결과 1 반만 성공함.…","frontmatter":{"date":"March 15, 2020","title":"Django로 스트리밍 하기 part2 - 중간 재생과 Unit test","categories":"개발블로그","author":"이워크","emoji":"👑"},"fields":{"slug":"/blog-20200315-Django-Streaming-Part2/"}},"next":{"id":"48033b56-2d2b-53fd-bec9-87884337a950","html":"<h1 id=\"사전-연습---text-streaming\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%A0%84-%EC%97%B0%EC%8A%B5---text-streaming\" aria-label=\"사전 연습   text streaming permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사전 연습 - text streaming</h1>\n<p>음악 스트리밍 웹인 TIDAL을 클론하기 위해서는 음악 스트리밍 기능을 구현하는 것이 가장 중요하다. 음악 스트리밍을 위해서 사전 연습으로 우선 텍스트 스트리밍을 먼저 해보려고 한다.</p>\n<p>과정은 아래와 같다.</p>\n<ol>\n<li>파일 이름을 path parameter로 받기</li>\n<li>해당하는 파일을 불러내기</li>\n<li>그 파일 속에 문구를 streaming으로 보내기</li>\n</ol>\n<h2 id=\"파일-준비\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%A4%80%EB%B9%84\" aria-label=\"파일 준비 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파일 준비</h2>\n<p>내가 준비한 파일은 text_sample이라는 단순 텍스트 파일이다. 파일 내부에는 볼빨간 사춘기 - 별 보러 갈래 의 가사가 담겨있다.</p>\n<details markdown=\"1\">\n  <summary> text_sample </summary>\n  Maybe it's like a dream  \n  I see the stars over me  \n  Maybe it's like a magic  \n  I know you, you, you're my star  \n  Saturday night 재미없는 얘기  \n  No beer, no cheers 우리 둘만 여기  \n  재미없는 사람끼리 눈이 맞았나 봐  \n  You've heard of my songs  \n  어떤 별을 가장 좋아하냐며  \n  미소를 띠고 내게 말해  \n  별 보러 갈래?  \n  Listen to our favorite songs  \n  좋아하는 노랠 듣고  \n  웃고 떠들다 보면  \n  We drive away  \n  어느새 멋진 바다  \n  위로 별들이 쏟아져내려  \n  Can't you see the stars?\n  They called it milky way 쏟아져 머리 위로\n  넌 나를 업고 모래사장을 뛰어다녀, yeah\n  그중 가장 예쁜 저 별을 찾아서\n  밤이 새도록 뛰어다니고\n  Stars are over me\n  Maybe I know the name\n  I see the stars over me\n  Maybe you got a planet\n  I know you, you got my star\n  Everyday night 매일 같은 얘기\n  No feeling, no chilling 우리 둘만 여기\n  재미없는 사람끼리 눈이 맞았나 봐\n  You've heard of my songs\n  어떤 별을 가장 좋아하냐며\n  미소를 띠고 내게 말해\n  별 보러 갈래?\n  Listen to our favorite songs\n  좋아하는 노랠 듣고\n  웃고 떠들다 보면\n  We drive away\n  어느새 멋진 바다\n  위로 별들이 쏟아져내려\n  Can't you see the stars?\n  모래 위에 누워서\n  저 별을 다 세보다가\n  아름다웠던 우리 이 순간을\n  저 별에 담아서\n  We fell in love\n  See the star\n  Be your star, yeah, yeah\n  They called it milky way 쏟아져 머리 위로\n  넌 나를 업고 모래사장을 뛰어다녀, yeah\n  그중 가장 예쁜 저 별을 찾아서\n  밤이 새도록 뛰어다니고\n  Stars are over me\n</details>\n<h2 id=\"viewspy-내부-로직\" style=\"position:relative;\"><a href=\"#viewspy-%EB%82%B4%EB%B6%80-%EB%A1%9C%EC%A7%81\" aria-label=\"viewspy 내부 로직 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>views.py 내부 로직</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http  <span class=\"token keyword\">import</span> StreamingHttpResponse\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">StreamTextView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n          in_file <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'file_name'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>   stream    <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>iteration<span class=\"token punctuation\">(</span>in_file<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>   response  <span class=\"token operator\">=</span> StreamingHttpResponse<span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> content_type <span class=\"token operator\">=</span> <span class=\"token string\">'text/event-stream'</span><span class=\"token punctuation\">)</span>\n          response<span class=\"token punctuation\">[</span><span class=\"token string\">'Cache-Control'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'no-cache'</span>\n\n          <span class=\"token keyword\">return</span> response\n\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> identifier<span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>identifier<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>   <span class=\"token keyword\">def</span> <span class=\"token function\">iteration</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> in_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>in_file<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb+'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n          <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            c <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> c<span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span>       <span class=\"token keyword\">yield</span> c\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n              <span class=\"token keyword\">break</span></code></pre></div>\n<ul>\n<li>[1] HttpResponse, JsonResponse 외에도 <strong>StreamingHttpResponse</strong> 를 import 한다.</li>\n<li>[2] query string 으로 받은 in_file에서 내부 내용을 가져오는 과정을 처리한다.</li>\n<li>[3] 처리해서 받은 내부 내용을 <strong>response</strong>에 담아 return</li>\n</ul>\n<p><strong>[2]의 과정을 좀 더 자세히 보자.</strong></p>\n<ul>\n<li>iteration이라는 함수는 [4]에 있는데, in_file이라는 파일을 f 라는 이름으로 연다.</li>\n<li>c = f.read()로 읽은 문장을 할당한다.</li>\n<li>문장 c 가 있으면 <code class=\"language-text\">yield c</code></li>\n<li>yield 한 문장이 [2] stream 변수에, 분할되어 (스트리밍되어) 할당되는 것이다.</li>\n</ul>\n<h2 id=\"yield\" style=\"position:relative;\"><a href=\"#yield\" aria-label=\"yield permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>yield?</h2>\n<p>우선 <code class=\"language-text\">return</code>과 마찬가지로 함수의 결과를 반환하는 역할을 한다. 그렇다면 차이점은 무엇일까?</p>\n<blockquote>\n<p><strong><span style=\"color:darkblue; background-color:beige; padding:2px;\">Return</span></strong> sends a specified value back to its caller whereas <strong><span style=\"color:green; background-color:beige; padding:2px;\">Yield</span></strong> can produce a sequence of values. We should use yield when we want to iterate over a sequence, but don’t want to store the entire sequence in memory. <a href=\"https://www.geeksforgeeks.org/use-yield-keyword-instead-return-keyword-python/\">reference</a></p>\n</blockquote>\n<p>즉, return은 결과를 한 번에 반환하고, yield는 결과의 시퀀스를 반환하여, 결과를 순회하여 응용할 때 사용하면 된다. 따라서, yield를 사용하면 파이썬 함수를 제너레이터로 사용할 수 있게 된다.</p>\n<p>스트리밍은, <strong>결과를 연쇄적으로 반환하는 과정</strong>이기 때문에 yield를 쓰는 것이다.</p>\n<h2 id=\"결과\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B3%BC\" aria-label=\"결과 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결과</h2>\n<p>실행시켜보자</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">http -v <span class=\"token number\">10.58</span>.2.53:8001/music/text?file_name<span class=\"token operator\">=</span>text_sample</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Maybe it<span class=\"token string\">'s like a dream\nI see the stars over me\nMaybe it'</span>s like a magic\nI know you, you, you<span class=\"token string\">'re my star\nSaturday night ì¬ë¯¸ìë ì\n                           ë¡ ë³\n                                 ë¤ì´ ìì\n                                            ì ¸ë´ë ¤\nCan'</span>t you see the stars?\nThey called it milky way ìì\n                             ì ¸ ë¨¸ë¦¬ ì\n                                          ë¡\në\n  ë ì  ë³\n            ì\n               ì°¾ì\n                    ì\n                     \në°¤ì´ ìë\n          ë¡ ë°ì´ë¤ëê³ \nStars are over me\nMaybe I know the name\nI see the stars over me\nMaybe you got a planet\nI know you, you got my star\nEveryday night ë§¤ì¼ ê°ì ì\n                              ë¡ ë³\n                                    ë¤ì´ ìì\n                                               ì ¸ë´ë ¤</code></pre></div>\n<p>한글이 왜 이렇게까지 깨지는 지는 참 의문이다 ;;</p>\n<h1 id=\"본편---음악-파일\" style=\"position:relative;\"><a href=\"#%EB%B3%B8%ED%8E%B8---%EC%9D%8C%EC%95%85-%ED%8C%8C%EC%9D%BC\" aria-label=\"본편   음악 파일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>본편 - 음악 파일</h1>\n<p>다행히, text file을 음악 파일로 바꿔주기만 하면 된다.<br>\n대신 쿼리 스트링으로 음악 파일이 아닌 음악의 track_id를 받아와서, 그 track의 url로 연결지어 줄 것이다.</p>\n<h2 id=\"viewspy\" style=\"position:relative;\"><a href=\"#viewspy\" aria-label=\"viewspy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>views.py</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StreamTextView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            track_id    <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'track_id'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n            track       <span class=\"token operator\">=</span> Track<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> track_id<span class=\"token punctuation\">)</span>\n            music_url   <span class=\"token operator\">=</span> track<span class=\"token punctuation\">.</span>music_url\n            stream      <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>iteration<span class=\"token punctuation\">(</span>music_url<span class=\"token punctuation\">)</span>\n            response    <span class=\"token operator\">=</span> StreamingHttpResponse<span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> content_type <span class=\"token operator\">=</span> <span class=\"token string\">'text/event-stream'</span><span class=\"token punctuation\">)</span>\n            response<span class=\"token punctuation\">[</span><span class=\"token string\">'Cache-Control'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'no-cache'</span>\n\n            <span class=\"token keyword\">return</span> response\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> identifier<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>indentifier<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">iteration</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> music_url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>music_url<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb+'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n                c <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> c<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">yield</span> c\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">break</span></code></pre></div>\n<h2 id=\"결과-1\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B3%BC-1\" aria-label=\"결과 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결과</h2>\n<p>실행시켜 보자</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">http -v <span class=\"token number\">10.58</span>.2.53:8001/music/text?track_id<span class=\"token operator\">=</span><span class=\"token number\">1</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">GET /music/text?track_id<span class=\"token operator\">=</span><span class=\"token number\">1</span> HTTP/1.1\nAccept: */*\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nHost: <span class=\"token number\">10.58</span>.2.53:8001\nUser-Agent: HTTPie/2.1.0-dev\n\n\n\nHTTP/1.1 <span class=\"token number\">200</span> OK\nCache-Control: no-cache\nConnection: close\nContent-Type: text/event-stream\nDate: Sun, <span class=\"token number\">15</span> Mar <span class=\"token number\">2020</span> <span class=\"token number\">13</span>:37:17 GMT\nServer: WSGIServer/0.2 CPython/3.7.4\nVary: Origin\nX-Content-Type-Options: nosniff\nX-Frame-Options: DENY\n\n\n\n+-----------------------------------------+\n<span class=\"token operator\">|</span> NOTE: binary data not shown <span class=\"token keyword\">in</span> terminal <span class=\"token operator\">|</span>\n+-----------------------------------------+</code></pre></div>\n<h2 id=\"\" style=\"position:relative;\"><a href=\"#\" aria-label=\" permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>????</h2>\n<p>바이너리 파일을 터미널에서 볼 수 없다고 ??</p>\n<h2 id=\"해결\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0\" aria-label=\"해결 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">http -v <span class=\"token number\">10.58</span>.2.53:8001/music/text?track_id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">></span> a\n\nxxd a\nxxd -b a</code></pre></div>\n<p>이러면 된다 ~</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">00113ff0: <span class=\"token number\">2240</span> 33c5 07b6 18e4 be3c ce1f 82f5 b8ee  .@3<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\n00114000: 33dc dda5 d286 eec1 da0b b747 7afb <span class=\"token number\">6792</span>  <span class=\"token number\">3</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>Gz.g.\n00114010: <span class=\"token number\">3207</span> 51df <span class=\"token number\">8021</span> d97e e451 66e7 <span class=\"token number\">1383</span> db78  <span class=\"token number\">2</span>.Q<span class=\"token punctuation\">..</span><span class=\"token operator\">!</span>.~.Qf<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>x\n00114020: 02cc 6a0e <span class=\"token number\">8252</span> b149 ca1a e261 c3cc b3b2  <span class=\"token punctuation\">..</span>j<span class=\"token punctuation\">..</span>R.I<span class=\"token punctuation\">..</span>.a<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\n00114030: f9eb 52d8 f41d <span class=\"token number\">3300</span> f6f7 cb7f e8a2 561c  <span class=\"token punctuation\">..</span>R<span class=\"token punctuation\">..</span>.3<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.V.\n00114040: 7bfc <span class=\"token number\">4874</span> <span class=\"token number\">5375</span> dafb 0347 f975 1d34 bf17  <span class=\"token punctuation\">{</span>.HtSu<span class=\"token punctuation\">..</span>.G.u.4<span class=\"token punctuation\">..</span>\n00114050: deac d4b6 3f94 426a 397f b2aa b24b 13dd  <span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>?.Bj9<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>K<span class=\"token punctuation\">..</span>\n00114060: 0843 a9c5 d8cb <span class=\"token number\">2725</span> f108 729a <span class=\"token number\">3135</span> <span class=\"token number\">3365</span>  .C<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>w%<span class=\"token punctuation\">..</span>r.153e\n00114070: f6a7 a94d 7e53 4b86 78fe afd0 d9b9 6a8a  <span class=\"token punctuation\">..</span>.M~SK.x<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.j.\n00114080: 1f95 ddaf da96 2c75 f88d 2e46 0916 600a  <span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>,u<span class=\"token punctuation\">..</span>.F<span class=\"token punctuation\">..</span>b.\n00114090: e21e <span class=\"token number\">6190</span> 23f2 b0ec 9e05 676e ffff ffe0  <span class=\"token punctuation\">..</span>a.<span class=\"token comment\">#.....gn....</span>\n001140a0: 40c4 bbd6 0000 6e09 <span class=\"token number\">8044</span> 0a60 46e3 <span class=\"token number\">4514</span>  @<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.n<span class=\"token punctuation\">..</span>D<span class=\"token punctuation\">..</span>F.E.\n001140b0: <span class=\"token number\">8931</span> <span class=\"token number\">2921</span> a89b 82da d05a ec0d <span class=\"token number\">9032</span> f03c  .1<span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.Z<span class=\"token punctuation\">..</span>.2.<span class=\"token operator\">&lt;</span>\n001140c0: 483a 0116 <span class=\"token number\">1734</span> 2c12 0c23 <span class=\"token number\">9960</span> 0a9a a051  H:<span class=\"token punctuation\">..</span>.4,<span class=\"token punctuation\">..</span><span class=\"token comment\">#.`...Q</span>\n001140d0: 0018 3c01 0003 <span class=\"token number\">8680</span> <span class=\"token number\">9181</span> <span class=\"token number\">8587</span> ed9c 04a8  <span class=\"token punctuation\">..</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.\n001140e0: 90b8 808a <span class=\"token number\">7397</span> bc15 1ab8 <span class=\"token number\">5410</span> 7cd3 0444  <span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>s<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.T.<span class=\"token operator\">|</span><span class=\"token punctuation\">..</span>D\n001140f0: be31 <span class=\"token number\">9553</span> 30e4 <span class=\"token number\">4687</span> 5e69 <span class=\"token number\">8984</span> 80d7 31d8  .1.S0.F.^i<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token number\">1</span>.\n00114100: <span class=\"token number\">8042</span> 0597 a243 1b7f 648c 8d60 <span class=\"token number\">9219</span> a734  .B<span class=\"token punctuation\">..</span>.C<span class=\"token punctuation\">..</span>d<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token number\">4</span>\n00114110: 976e 1c7d e34b b16a 060b <span class=\"token number\">6772</span> a809 f3ca  .n.<span class=\"token punctuation\">}</span>.K.j<span class=\"token punctuation\">..</span>gr<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\n00114120: 8a18 6dda b3b7 2ad4 adef 985c 8f24 <span class=\"token number\">3701</span>  <span class=\"token punctuation\">..</span>m<span class=\"token punctuation\">..</span>.*<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">\\</span>.<span class=\"token variable\">$7</span><span class=\"token builtin class-name\">.</span>\n00114130: 5d9d 87e3 709a 96ea c5e5 1f04 <span class=\"token number\">6715</span> 5d0e  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">..</span>.p<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.g.<span class=\"token punctuation\">]</span>.\n00114140: <span class=\"token number\">7431</span> <span class=\"token number\">1853</span> <span class=\"token number\">7913</span> b96e <span class=\"token number\">4953</span> 1d53 ea17 279f  t1.Sy<span class=\"token punctuation\">..</span>nIS.S<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\n00114150: a3a2 a09d 92c3 f632 75e6 3d73 aa79 e6de  <span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.2u.<span class=\"token operator\">=</span>s.y<span class=\"token punctuation\">..</span>\n00114160: 65af c429 e293 ecbe <span class=\"token number\">3120</span> dbf9 25ff fbe0  e<span class=\"token punctuation\">..</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token number\">1</span> <span class=\"token punctuation\">..</span>%<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p><strong>10.58.2.53:8001/music/text?track_id=1</strong><br>\n이걸 chrome 주소창에 입력하면, 크롬 브라우저가 binary를 읽어서 파일을 재생시켜줌 !</p>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%ED%8C%8C%EC%9D%BC-%EC%A4%80%EB%B9%84\">파일 준비</a></li>\n<li><a href=\"#viewspy-%EB%82%B4%EB%B6%80-%EB%A1%9C%EC%A7%81\">views.py 내부 로직</a></li>\n<li><a href=\"#yield\">yield?</a></li>\n<li><a href=\"#%EA%B2%B0%EA%B3%BC\">결과</a></li>\n<li><a href=\"#viewspy\">views.py</a></li>\n<li><a href=\"#%EA%B2%B0%EA%B3%BC-1\">결과</a></li>\n<li><a href=\"#\">????</a></li>\n<li><a href=\"#%ED%95%B4%EA%B2%B0\">해결</a></li>\n</ul>\n</div>","frontmatter":{"date":"March 15, 2020","title":"Django로 스트리밍 하기 part1 - binary streaming","categories":"개발블로그","author":"이워크","emoji":"👑"},"fields":{"slug":"/blog-20200315-Django-Streaming-Part1/"}},"prev":{"id":"7df99284-96e3-5b5e-86a2-b294951ef2d7","html":"<p>파이썬으로 다양한 객체들을 다루다보면 종종 <code class=\"language-text\">with open</code>을 사용한다.<br>\n특히 파일을 열 때 유용하게 사용하는데, 텍스트(.txt) 파일을 활용하여 작업할 때는 물론이며 음악 파일을 다룰 때에도 어김없이 등장한다.</p>\n<ul>\n<li><a style=\"color:orange; text-decoration:none; font-weight:800\" href='https://soheon-lee.github.io/blog-20200315-Django-Streaming-Part1/'> Django로 음악 스트리밍하기 PART1</a></li>\n<li><a style=\"color:orange; text-decoration:none; font-weight:800\" href='https://soheon-lee.github.io/blog-20200315-Django-Streaming-Part2/'> Django로 음악 스트리밍하기 PART2</a></li>\n</ul>\n<p>현재 진행중인 프로젝트에서는 database 로 연결되는 connection을 열고 닫을 때도 사용하고 있다.<br>\n그렇다면 이 기능의 정체는 무엇일까? 나만의 데이터도 with open으로 열 수 있을까?</p>\n<h1 id=\"python-with-\" style=\"position:relative;\"><a href=\"#python-with-\" aria-label=\"python with  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python ‘with’ ?</h1>\n<p>파이썬을 사용하는 사람이라면, 아래 구문이 꽤나 익숙할 것이다. with은 쉽게 말해 아래 구문을 <strong>한 단어로 합쳐놓은 것</strong>이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">set</span> things up\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n  do something\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n  tear things down</code></pre></div>\n<p>여기서 <code class=\"language-text\">set things up</code> 구문은 파일을 여는 등의 명령인데, 열고 나서 <code class=\"language-text\">something</code>을 하고, 그 명령이 끝나고 나면, 결과 여부에 상관없이 (suceeded or not) <code class=\"language-text\">tear things down</code> 하라는 구문이다.<br>\n예를 들어, python에서 mysql.connector 라는 커넥터를 이용하여 데이터베이스와의 연결을 연다고 가정해보자.<br>\n(mysql에 관한 아래 설정은 무시해도 좋다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">db_connection <span class=\"token operator\">=</span> mysql<span class=\"token punctuation\">.</span>connector<span class=\"token punctuation\">.</span>connect\n  <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'database'</span><span class=\"token operator\">=</span>DATABASE<span class=\"token punctuation\">[</span><span class=\"token string\">'database'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'user'</span><span class=\"token operator\">=</span>DATABASE<span class=\"token punctuation\">[</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n  db_cursor <span class=\"token operator\">=</span> db_connection<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n  db_cursor<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></code></pre></div>\n<ol>\n<li>데이터베이스 연결을 만든다 (연다).</li>\n<li>커서를 연결한다.</li>\n<li>커서를 닫는다.</li>\n</ol>\n<p>위의 코드는 파일을 열고 어떤 명령을 내리고 저걸 다시 닫는 단순 과정이다. 딱!! 함수화하기에 적당한 과정이 아닌가?</p>\n<h3 id=\"이-모든-과정을-한-번에-처리하기-위해-존재하는-것이-with이다\" style=\"position:relative;\"><a href=\"#%EC%9D%B4-%EB%AA%A8%EB%93%A0-%EA%B3%BC%EC%A0%95%EC%9D%84-%ED%95%9C-%EB%B2%88%EC%97%90-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%B4-%EC%A1%B4%EC%9E%AC%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4-with%EC%9D%B4%EB%8B%A4\" aria-label=\"이 모든 과정을 한 번에 처리하기 위해 존재하는 것이 with이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이 모든 과정을 한 번에 처리하기 위해 존재하는 것이 ‘with’이다.</h3>\n<h1 id=\"객체-생성\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1\" aria-label=\"객체 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 생성</h1>\n<p>파이썬의 거의 모든 자료형은 <strong>객체</strong>다. 어떤 객체를 <code class=\"language-text\">with</code>으로 열고 싶다면, 그 객체의 기본 메소드로 <code class=\"language-text\">__enter__</code>과 <code class=\"language-text\">__exit__</code>이 필요하다.</p>\n<h3 id=\"__enter__--객체가-열리자마자-실행\" style=\"position:relative;\"><a href=\"#__enter__--%EA%B0%9D%EC%B2%B4%EA%B0%80-%EC%97%B4%EB%A6%AC%EC%9E%90%EB%A7%88%EC%9E%90-%EC%8B%A4%ED%96%89\" aria-label=\"__enter__  객체가 열리자마자 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>__enter__ : 객체가 열리자마자 실행</h3>\n<h3 id=\"__exit__-객체가-닫힐때-실행\" style=\"position:relative;\"><a href=\"#__exit__-%EA%B0%9D%EC%B2%B4%EA%B0%80-%EB%8B%AB%ED%9E%90%EB%95%8C-%EC%8B%A4%ED%96%89\" aria-label=\"__exit__ 객체가 닫힐때 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>__exit__: 객체가 닫힐때 실행</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">contolled_execution</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__enter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">set</span> things up\n    <span class=\"token keyword\">return</span> thing\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__exit__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> traceback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    tear things down\n\n<span class=\"token keyword\">with</span> controlled_execution<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> thing<span class=\"token punctuation\">:</span>\n  some code using thing</code></pre></div>\n<p><code class=\"language-text\">with</code>구문이 실행되면, <strong>context manager</strong>이 자동으로 <code class=\"language-text\">__enter__</code> 메소드로 정의된 동작을 수행하고, 이 메소드의 결과로 반환하는 <code class=\"language-text\">return</code>값을 <code class=\"language-text\">as</code>를 사용해 things에 저장한다. Python이 코드의 다른 body 부분을 수행한 다음에는 그 결과가 어떠하든 (finally) <code class=\"language-text\">__exit__</code> 메소드를 실행하게 된다.<br>\n앞서 예시로 든 mysql database connection 에 이 방법을 적용해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DatabaseConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__enter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      self<span class=\"token punctuation\">.</span>cursor <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>db_connection<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">(</span>buffered<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> dictionary<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>cursor\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__exit__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> exc_type<span class=\"token punctuation\">,</span> exc_value<span class=\"token punctuation\">,</span> exc_trance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ndatabase_connection_cursor <span class=\"token operator\">=</span> DatabaseConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> database_connection_cursor <span class=\"token keyword\">as</span> db_cursor<span class=\"token punctuation\">:</span>\n    db_cursor<span class=\"token punctuation\">.</span>do_something</code></pre></div>\n<h1 id=\"file-객체는-어떤-모양인가\" style=\"position:relative;\"><a href=\"#file-%EA%B0%9D%EC%B2%B4%EB%8A%94-%EC%96%B4%EB%96%A4-%EB%AA%A8%EC%96%91%EC%9D%B8%EA%B0%80\" aria-label=\"file 객체는 어떤 모양인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>file 객체는 어떤 모양인가?</h1>\n<p>우리가 자주 with open 구문으로 사용하는 file 객체도 사실 뜯어보면 <code class=\"language-text\">__enter__</code>과 <code class=\"language-text\">__exit__</code>이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x.txt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> f\n<span class=\"token operator\">&lt;</span><span class=\"token builtin\">open</span> <span class=\"token builtin\">file</span> <span class=\"token string\">'x.txt'</span><span class=\"token punctuation\">,</span> mode <span class=\"token string\">'r'</span> at <span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">.</span>__enter__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token builtin\">open</span> <span class=\"token builtin\">file</span> <span class=\"token string\">'x.txt'</span><span class=\"token punctuation\">,</span> mode <span class=\"token string\">'r'</span> at <span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">.</span>__exit__<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span></code></pre></div>\n<p>그래서 우리가 with file open을 사용할 수 있었다.</p>\n<hr>\n<p>이 방법을 사용하면 다양한 객체를 응용해서 사용할 수 있다. 하지만 이 방법… pymysql 모듈 쓰면 다 알아서 해준다… 있는 자료 잘 활용하는 법도 터득해보자 ..ㅎ…</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%9D%B4-%EB%AA%A8%EB%93%A0-%EA%B3%BC%EC%A0%95%EC%9D%84-%ED%95%9C-%EB%B2%88%EC%97%90-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%B4-%EC%A1%B4%EC%9E%AC%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4-with%EC%9D%B4%EB%8B%A4\">이 모든 과정을 한 번에 처리하기 위해 존재하는 것이 ‘with’이다.</a></li>\n<li><a href=\"#__enter__--%EA%B0%9D%EC%B2%B4%EA%B0%80-%EC%97%B4%EB%A6%AC%EC%9E%90%EB%A7%88%EC%9E%90-%EC%8B%A4%ED%96%89\">__enter__ : 객체가 열리자마자 실행</a></li>\n<li><a href=\"#__exit__-%EA%B0%9D%EC%B2%B4%EA%B0%80-%EB%8B%AB%ED%9E%90%EB%95%8C-%EC%8B%A4%ED%96%89\">__exit__: 객체가 닫힐때 실행</a></li>\n</ul>\n</div>","frontmatter":{"date":"April 05, 2020","title":"With as로 열 수 있는 파이썬 객체 생성하기","categories":"개발블로그","author":"이워크","emoji":"👑"},"fields":{"slug":"/blog-20200405-With-as-Python-Object/"}},"site":{"siteMetadata":{"siteUrl":"https://www.zoomkoding.com","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/blog-20200315-Django-Streaming-Part2/","nextSlug":"/blog-20200315-Django-Streaming-Part1/","prevSlug":"/blog-20200405-With-as-Python-Object/"}},"staticQueryHashes":["1073350324","2938748437"]}