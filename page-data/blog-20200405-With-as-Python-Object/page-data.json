{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog-20200405-With-as-Python-Object/","result":{"data":{"cur":{"id":"7df99284-96e3-5b5e-86a2-b294951ef2d7","html":"<p>파이썬으로 다양한 객체들을 다루다보면 종종 <code class=\"language-text\">with open</code>을 사용한다.<br>\n특히 파일을 열 때 유용하게 사용하는데, 텍스트(.txt) 파일을 활용하여 작업할 때는 물론이며 음악 파일을 다룰 때에도 어김없이 등장한다.</p>\n<ul>\n<li><a style=\"color:orange; text-decoration:none; font-weight:800\" href='https://soheon-lee.github.io/blog-20200315-Django-Streaming-Part1/'> Django로 음악 스트리밍하기 PART1</a></li>\n<li><a style=\"color:orange; text-decoration:none; font-weight:800\" href='https://soheon-lee.github.io/blog-20200315-Django-Streaming-Part2/'> Django로 음악 스트리밍하기 PART2</a></li>\n</ul>\n<p>현재 진행중인 프로젝트에서는 database 로 연결되는 connection을 열고 닫을 때도 사용하고 있다.<br>\n그렇다면 이 기능의 정체는 무엇일까? 나만의 데이터도 with open으로 열 수 있을까?</p>\n<h1 id=\"python-with-\" style=\"position:relative;\"><a href=\"#python-with-\" aria-label=\"python with  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python ‘with’ ?</h1>\n<p>파이썬을 사용하는 사람이라면, 아래 구문이 꽤나 익숙할 것이다. with은 쉽게 말해 아래 구문을 <strong>한 단어로 합쳐놓은 것</strong>이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">set</span> things up\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n  do something\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n  tear things down</code></pre></div>\n<p>여기서 <code class=\"language-text\">set things up</code> 구문은 파일을 여는 등의 명령인데, 열고 나서 <code class=\"language-text\">something</code>을 하고, 그 명령이 끝나고 나면, 결과 여부에 상관없이 (suceeded or not) <code class=\"language-text\">tear things down</code> 하라는 구문이다.<br>\n예를 들어, python에서 mysql.connector 라는 커넥터를 이용하여 데이터베이스와의 연결을 연다고 가정해보자.<br>\n(mysql에 관한 아래 설정은 무시해도 좋다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">db_connection <span class=\"token operator\">=</span> mysql<span class=\"token punctuation\">.</span>connector<span class=\"token punctuation\">.</span>connect\n  <span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'database'</span><span class=\"token operator\">=</span>DATABASE<span class=\"token punctuation\">[</span><span class=\"token string\">'database'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'user'</span><span class=\"token operator\">=</span>DATABASE<span class=\"token punctuation\">[</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n  db_cursor <span class=\"token operator\">=</span> db_connection<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n  db_cursor<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></code></pre></div>\n<ol>\n<li>데이터베이스 연결을 만든다 (연다).</li>\n<li>커서를 연결한다.</li>\n<li>커서를 닫는다.</li>\n</ol>\n<p>위의 코드는 파일을 열고 어떤 명령을 내리고 저걸 다시 닫는 단순 과정이다. 딱!! 함수화하기에 적당한 과정이 아닌가?</p>\n<h3 id=\"이-모든-과정을-한-번에-처리하기-위해-존재하는-것이-with이다\" style=\"position:relative;\"><a href=\"#%EC%9D%B4-%EB%AA%A8%EB%93%A0-%EA%B3%BC%EC%A0%95%EC%9D%84-%ED%95%9C-%EB%B2%88%EC%97%90-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%B4-%EC%A1%B4%EC%9E%AC%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4-with%EC%9D%B4%EB%8B%A4\" aria-label=\"이 모든 과정을 한 번에 처리하기 위해 존재하는 것이 with이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이 모든 과정을 한 번에 처리하기 위해 존재하는 것이 ‘with’이다.</h3>\n<h1 id=\"객체-생성\" style=\"position:relative;\"><a href=\"#%EA%B0%9D%EC%B2%B4-%EC%83%9D%EC%84%B1\" aria-label=\"객체 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체 생성</h1>\n<p>파이썬의 거의 모든 자료형은 <strong>객체</strong>다. 어떤 객체를 <code class=\"language-text\">with</code>으로 열고 싶다면, 그 객체의 기본 메소드로 <code class=\"language-text\">__enter__</code>과 <code class=\"language-text\">__exit__</code>이 필요하다.</p>\n<h3 id=\"__enter__--객체가-열리자마자-실행\" style=\"position:relative;\"><a href=\"#__enter__--%EA%B0%9D%EC%B2%B4%EA%B0%80-%EC%97%B4%EB%A6%AC%EC%9E%90%EB%A7%88%EC%9E%90-%EC%8B%A4%ED%96%89\" aria-label=\"__enter__  객체가 열리자마자 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>__enter__ : 객체가 열리자마자 실행</h3>\n<h3 id=\"__exit__-객체가-닫힐때-실행\" style=\"position:relative;\"><a href=\"#__exit__-%EA%B0%9D%EC%B2%B4%EA%B0%80-%EB%8B%AB%ED%9E%90%EB%95%8C-%EC%8B%A4%ED%96%89\" aria-label=\"__exit__ 객체가 닫힐때 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>__exit__: 객체가 닫힐때 실행</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">contolled_execution</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__enter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">set</span> things up\n    <span class=\"token keyword\">return</span> thing\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__exit__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> traceback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    tear things down\n\n<span class=\"token keyword\">with</span> controlled_execution<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> thing<span class=\"token punctuation\">:</span>\n  some code using thing</code></pre></div>\n<p><code class=\"language-text\">with</code>구문이 실행되면, <strong>context manager</strong>이 자동으로 <code class=\"language-text\">__enter__</code> 메소드로 정의된 동작을 수행하고, 이 메소드의 결과로 반환하는 <code class=\"language-text\">return</code>값을 <code class=\"language-text\">as</code>를 사용해 things에 저장한다. Python이 코드의 다른 body 부분을 수행한 다음에는 그 결과가 어떠하든 (finally) <code class=\"language-text\">__exit__</code> 메소드를 실행하게 된다.<br>\n앞서 예시로 든 mysql database connection 에 이 방법을 적용해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DatabaseConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__enter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      self<span class=\"token punctuation\">.</span>cursor <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>db_connection<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">(</span>buffered<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> dictionary<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>cursor\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__exit__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> exc_type<span class=\"token punctuation\">,</span> exc_value<span class=\"token punctuation\">,</span> exc_trance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>cursor<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ndatabase_connection_cursor <span class=\"token operator\">=</span> DatabaseConnection<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> database_connection_cursor <span class=\"token keyword\">as</span> db_cursor<span class=\"token punctuation\">:</span>\n    db_cursor<span class=\"token punctuation\">.</span>do_something</code></pre></div>\n<h1 id=\"file-객체는-어떤-모양인가\" style=\"position:relative;\"><a href=\"#file-%EA%B0%9D%EC%B2%B4%EB%8A%94-%EC%96%B4%EB%96%A4-%EB%AA%A8%EC%96%91%EC%9D%B8%EA%B0%80\" aria-label=\"file 객체는 어떤 모양인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>file 객체는 어떤 모양인가?</h1>\n<p>우리가 자주 with open 구문으로 사용하는 file 객체도 사실 뜯어보면 <code class=\"language-text\">__enter__</code>과 <code class=\"language-text\">__exit__</code>이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x.txt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> f\n<span class=\"token operator\">&lt;</span><span class=\"token builtin\">open</span> <span class=\"token builtin\">file</span> <span class=\"token string\">'x.txt'</span><span class=\"token punctuation\">,</span> mode <span class=\"token string\">'r'</span> at <span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">.</span>__enter__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token builtin\">open</span> <span class=\"token builtin\">file</span> <span class=\"token string\">'x.txt'</span><span class=\"token punctuation\">,</span> mode <span class=\"token string\">'r'</span> at <span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">%</span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> f<span class=\"token punctuation\">.</span>__exit__<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span></code></pre></div>\n<p>그래서 우리가 with file open을 사용할 수 있었다.</p>\n<hr>\n<p>이 방법을 사용하면 다양한 객체를 응용해서 사용할 수 있다. 하지만 이 방법… pymysql 모듈 쓰면 다 알아서 해준다… 있는 자료 잘 활용하는 법도 터득해보자 ..ㅎ…</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%9D%B4-%EB%AA%A8%EB%93%A0-%EA%B3%BC%EC%A0%95%EC%9D%84-%ED%95%9C-%EB%B2%88%EC%97%90-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%B4-%EC%A1%B4%EC%9E%AC%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4-with%EC%9D%B4%EB%8B%A4\">이 모든 과정을 한 번에 처리하기 위해 존재하는 것이 ‘with’이다.</a></li>\n<li><a href=\"#__enter__--%EA%B0%9D%EC%B2%B4%EA%B0%80-%EC%97%B4%EB%A6%AC%EC%9E%90%EB%A7%88%EC%9E%90-%EC%8B%A4%ED%96%89\">__enter__ : 객체가 열리자마자 실행</a></li>\n<li><a href=\"#__exit__-%EA%B0%9D%EC%B2%B4%EA%B0%80-%EB%8B%AB%ED%9E%90%EB%95%8C-%EC%8B%A4%ED%96%89\">__exit__: 객체가 닫힐때 실행</a></li>\n</ul>\n</div>","excerpt":"파이썬으로 다양한 객체들을 다루다보면 종종 을 사용한다. 특히 파일을 열 때 유용하게 사용하는데, 텍스트(.txt) 파일을 활용하여 작업할 때는 물론이며 음악 파일을 다룰 때에도 어김없이 등장한다.  Django로 음악 스트리밍하기 PART1  Django로 음악 스트리밍하기 PART2 현재 진행중인 프로젝트에서는 database 로 연결되는 connection을 열고 닫을 때도 사용하고 있다. 그렇다면 이 기능의 정체는 무엇일까? 나만의 데이터도 with open으로 열 수 있을까? Python ‘with’ ? 파이썬을 사용하는 사람이라면, 아래 구문이 꽤나 익숙할 것이다. with은 쉽게 말해 아래 구문을 한 단어로 합쳐놓은 것이다. 여기서  구문은 파일을 여는 등의 명령인데, 열고 나서 을 하고, 그 명령이 끝나고 나면, 결과 여부에 상관없이 (suceeded or not)  하라는 구문이다. 예를 들어, python에서 mysql.connector 라는 커넥터를 이용하여 데…","frontmatter":{"date":"April 05, 2020","title":"With as로 열 수 있는 파이썬 객체 생성하기","categories":"개발블로그","author":"이워크","emoji":"👑"},"fields":{"slug":"/blog-20200405-With-as-Python-Object/"}},"next":{"id":"e56d1a5e-b653-5b22-8f18-06573b9cb420","html":"<h1 id=\"중간부터-스트리밍\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EA%B0%84%EB%B6%80%ED%84%B0-%EC%8A%A4%ED%8A%B8%EB%A6%AC%EB%B0%8D\" aria-label=\"중간부터 스트리밍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중간부터 스트리밍</h1>\n<p>이전에 작성했던 스트리밍 코드는 아래와 같다.</p>\n<h3 id=\"viewspy\" style=\"position:relative;\"><a href=\"#viewspy\" aria-label=\"viewspy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>views.py</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StreamTextView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            track_id    <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'track_id'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n            track       <span class=\"token operator\">=</span> Track<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> track_id<span class=\"token punctuation\">)</span>\n            music_url   <span class=\"token operator\">=</span> track<span class=\"token punctuation\">.</span>music_url\n            stream      <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>iteration<span class=\"token punctuation\">(</span>music_url<span class=\"token punctuation\">)</span>\n            response    <span class=\"token operator\">=</span> StreamingHttpResponse<span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> content_type <span class=\"token operator\">=</span> <span class=\"token string\">'text/event-stream'</span><span class=\"token punctuation\">)</span>\n            response<span class=\"token punctuation\">[</span><span class=\"token string\">'Cache-Control'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'no-cache'</span>\n\n            <span class=\"token keyword\">return</span> response\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> identifier<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>indentifier<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">iteration</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> music_url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>music_url<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb+'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n                c <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> c<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">yield</span> c\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">break</span></code></pre></div>\n<p>프론트에 fetch url 을 주고, 그 URL이 호출될 때 위 클래스가 실행되면 노래가 저절로 재생되었다. 그러나 지금 코드로는 노래를 오로지 처음부터만 재생할 수 있다. 중간부터 재생하려고 재생막대 그 어딘가를 누르게되면, 다시 fetch url을 호출하는 과정이 되기 때문에 다시 노래가 처음부터 시작된다.</p>\n<p><strong>행복하지 않다.</strong></p>\n<h2 id=\"첫번째-시도\" style=\"position:relative;\"><a href=\"#%EC%B2%AB%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84\" aria-label=\"첫번째 시도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>첫번째 시도,</h2>\n<p>파일을 읽어오는 부분인 <code class=\"language-text\">c = f.read()</code> 부분에 어디서 읽을지 시작부분을 넣어주는 방법이다. <code class=\"language-text\">c = f.read(sample_rate * second)</code> 의 형태이다. 여기서 sample rate란 음악 파일에서 초당 읽어오는 데이터의 양이다. 따라서 시작하고자 하는 위치를 초(second)의 형태로 곱해주면, 파일에서 내가 시작하고자 하는 부분부터 읽어올 수 있기 때문이다.<br>\nsample rate는 음악별로 다르지만, jamendo 홈페이지에서 다운받은 무료 음원의 sample rate은 거의 모두 22050이었다.</p>\n<h3 id=\"결과-1\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B3%BC-1\" aria-label=\"결과 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결과 1</h3>\n<p>반만 성공함. 프론트엔드에서 지정한 위치를 따로 설정해서 받아오는 것은 작동하지 않았고, second = 70 (초)로 설정해두면, 매번 70초의 위치에서 노래가 시작되기만 했다 ㅋㅋㅋ</p>\n<h2 id=\"두번째-시도\" style=\"position:relative;\"><a href=\"#%EB%91%90%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84\" aria-label=\"두번째 시도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>두번째 시도,</h2>\n<p>위에 입력한 코드의 <code class=\"language-text\">response</code>에 다른 attribute를 추가해주었다.</p>\n<ol>\n<li>response[‘Accept-Ranges’] = ‘bytes’</li>\n<li>response[‘Content-Length’] = len(open(‘media/‘+music_file, ‘rb’).read())</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MusicStreamingView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        track_id    <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'track_id'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n        start_sec   <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'start_sec'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> track_id<span class=\"token punctuation\">:</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>track_id<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>Track<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>track_id<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'INVALID_KEY'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n            track       <span class=\"token operator\">=</span> Track<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> track_id<span class=\"token punctuation\">)</span>\n            music_file  <span class=\"token operator\">=</span> track<span class=\"token punctuation\">.</span>music_url\n            stream      <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>iteration<span class=\"token punctuation\">(</span><span class=\"token string\">'media/'</span><span class=\"token operator\">+</span>music_file<span class=\"token punctuation\">)</span>\n            response    <span class=\"token operator\">=</span> StreamingHttpResponse<span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n            response<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span>        <span class=\"token operator\">=</span> <span class=\"token string\">'audio/mpeg'</span>\n            response<span class=\"token punctuation\">[</span><span class=\"token string\">'Accept-Ranges'</span><span class=\"token punctuation\">]</span>       <span class=\"token operator\">=</span> <span class=\"token string\">'bytes'</span>\n            response<span class=\"token punctuation\">[</span><span class=\"token string\">'Cache-Control'</span><span class=\"token punctuation\">]</span>       <span class=\"token operator\">=</span> <span class=\"token string\">'no-cache'</span>\n            response<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Length'</span><span class=\"token punctuation\">]</span>      <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'media/'</span><span class=\"token operator\">+</span>music_file<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            response<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Disposition'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'filename = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>music_file<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span>\n\n            <span class=\"token keyword\">return</span> response\n\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'INVALID_KEYWORD'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">iteration</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> file_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb+'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n           <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n                content <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> content<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">yield</span> content\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">break</span></code></pre></div>\n<h3 id=\"결과-2\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B3%BC-2\" aria-label=\"결과 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결과 2</h3>\n<p>성공성공~</p>\n<h1 id=\"음악-파일-unit-test\" style=\"position:relative;\"><a href=\"#%EC%9D%8C%EC%95%85-%ED%8C%8C%EC%9D%BC-unit-test\" aria-label=\"음악 파일 unit test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>음악 파일 unit test</h1>\n<p>요즘 개발과 동시에 유닛테스트를 진행하고 있다. 일반 <code class=\"language-text\">HttpResponse</code> 나 <code class=\"language-text\">JssonResponse</code>와는 달리 Streaming music은 어떻게 unit test를 할까?</p>\n<p>우선은 지정해둔 내부 속성들이 다 잘 전달되었는지로 확인하기로 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">response<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Disposition'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'filename  = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>music_file<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span></code></pre></div>\n<p>이렇게 추가해두고, test.py 파일은 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StreamingTest</span><span class=\"token punctuation\">(</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n     <span class=\"token keyword\">def</span> <span class=\"token function\">test_streaming_get_success</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n         client <span class=\"token operator\">=</span> Client<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'/music/track?track_id=1'</span><span class=\"token punctuation\">)</span>\n         self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>\n             <span class=\"token string\">'Content-Disposition'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n             <span class=\"token string\">\"filename = DR_GROOVE_GANG_-_A_l_ancienne.mp3\"</span>\n         <span class=\"token punctuation\">)</span>\n         self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>우선 여기까지로 타협 !</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<ul>\n<li><a href=\"#viewspy\">views.py</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B2%AB%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84\">첫번째 시도,</a></p>\n<ul>\n<li><a href=\"#%EA%B2%B0%EA%B3%BC-1\">결과 1</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%91%90%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84\">두번째 시도,</a></p>\n<ul>\n<li><a href=\"#%EA%B2%B0%EA%B3%BC-2\">결과 2</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"March 15, 2020","title":"Django로 스트리밍 하기 part2 - 중간 재생과 Unit test","categories":"개발블로그","author":"이워크","emoji":"👑"},"fields":{"slug":"/blog-20200315-Django-Streaming-Part2/"}},"prev":{"id":"32f75736-964c-5606-bc82-02e20942c129","html":"<h1 id=\"정참조와-역참조-객체-서로-호출하기\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EC%B0%B8%EC%A1%B0%EC%99%80-%EC%97%AD%EC%B0%B8%EC%A1%B0-%EA%B0%9D%EC%B2%B4-%EC%84%9C%EB%A1%9C-%ED%98%B8%EC%B6%9C%ED%95%98%EA%B8%B0\" aria-label=\"정참조와 역참조 객체 서로 호출하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정참조와 역참조 객체 서로 호출하기</h1>\n<p>데이터베이스에서 두 테이블이 참조 관계에 있는 경우를 생각해보자. 예를 들어, <code class=\"language-text\">User</code> 테이블과 사용자의 직업인 <code class=\"language-text\">Occupation</code> 테이블이 있다. 두 테이블은 N:1 관계에 있으며, <code class=\"language-text\">User</code> 객체가 <code class=\"language-text\">Occupation</code> 객체를 참조하고 있다. <code class=\"language-text\">User</code> 가 <code class=\"language-text\">Occupation</code> 을 선택하여 입사 원서를 작성한다고 가정해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name\t<span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n    job\t\t<span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span><span class=\"token string\">'Occupation'</span><span class=\"token punctuation\">,</span> on_delete <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">)</span>\n    created_at\t<span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now_add <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Occupation</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">User</code> 객체는 <code class=\"language-text\">Occupation</code> 객체를 정참조 하고 있으므로, 속성 이름으로 바로 접근 할 수 있다. User1을 선택하여, 그 사람의 job을 찾아보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">user1 <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nuser1<span class=\"token punctuation\">.</span>job<span class=\"token punctuation\">.</span>name\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token string\">'Developer'</span></code></pre></div>\n<p>그러나 <code class=\"language-text\">Occupation</code> 객체는 <code class=\"language-text\">User</code> 객체를 역참조 하고 있으므로 바로 접근이 불가능하다. <code class=\"language-text\">developer</code> 이라는 <code class=\"language-text\">Occupation</code>을 가지고 있는 유저를 모두 찾아보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">job1   <span class=\"token operator\">=</span> Occupation<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'developer'</span><span class=\"token punctuation\">)</span>\npeople <span class=\"token operator\">=</span> job1<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 이게 될까?</span></code></pre></div>\n<p>❌ 안 됨 ❌</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;console>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\nAttributeError<span class=\"token punctuation\">:</span> <span class=\"token string\">'Occupation'</span> <span class=\"token builtin\">object</span> has no attribute <span class=\"token string\">'user'</span></code></pre></div>\n<p>그렇다고 절대로 사용하지 못하는 것은 절대 아니니 걱정하지말자. <strong>역참조 관계에 있을 때는 <code class=\"language-text\">[classname]_set</code> 이라는 속성을 사용하여 접근</strong>해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">job1   <span class=\"token operator\">=</span> Occupation<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\npeople <span class=\"token operator\">=</span> job1<span class=\"token punctuation\">.</span>user_set<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>QuerySet<span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>Object User Object<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>Object User Object<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></code></pre></div>\n<p>이 때, <code class=\"language-text\">user_set</code> 대신 사용할 수 있는 것이 <code class=\"language-text\">related_name</code>이다. 역참조 대상인 <code class=\"language-text\">user</code> 객체를 부를 이름.</p>\n<blockquote>\n<p>즉, <code class=\"language-text\">User</code> 클래스를 정의할 때, 정참조 하고 있는 <code class=\"language-text\">Occupation</code> 클래스의 인스턴스에서 어떤 명칭으로 거꾸로 호출당할 지 정해주는 이름인 것이다.</p>\n</blockquote>\n<h1 id=\"what-related-names-do\" style=\"position:relative;\"><a href=\"#what-related-names-do\" aria-label=\"what related names do permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What related names do</h1>\n<p>앞의 예시를 다시 보자. 아무래도 <code class=\"language-text\">Occupation</code>의 입장에서는 입사 지원자들을 <code class=\"language-text\">appliers</code>라고 부르는 것이 더 직관적이고 편할 것 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n    job\t <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'Occupation'</span><span class=\"token punctuation\">,</span>\n            on_delete    <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">,</span>\n            related_name <span class=\"token operator\">=</span> <span class=\"token string\">'appliers'</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span>Key Point !<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span>\n    created_at\t<span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now_add <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Occupation</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>[Key Point]</strong> 를 눈여겨 보자.\n<code class=\"language-text\">User</code>객체를 정의할 때, <code class=\"language-text\">job</code>이라는 속성에 <code class=\"language-text\">Occupation</code>객체가 연결되어 정참조하고 있다. <code class=\"language-text\">Occupation</code>객체의 인스턴스와 연결되어 있는 <code class=\"language-text\">User</code> 객체를 거꾸로 불러올 때, <code class=\"language-text\">appliers</code> 라는 이름으로 부르기 위해 <code class=\"language-text\">job</code> 속성에 <code class=\"language-text\">related_names = 'appliers'</code>를 함께 지정해주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">job1   <span class=\"token operator\">=</span> Occupation<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\npeople <span class=\"token operator\">=</span> job1<span class=\"token punctuation\">.</span>appliers<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>QuerySet<span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>Object User Object<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>Object User Object<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></code></pre></div>\n<p>잘 동작하는 것을 알 수 있다. 모든 Foreign Key에 related<em>name을 붙여줄 필요는 없다. 때에 따라, 참조하고 있는 객체 이름에 `</em>set`을 붙이는 것이 더 직관적인 경우가 굉장히 많기 때문이다.</p>\n<h1 id=\"related-name이-필수인-경우가-있다\" style=\"position:relative;\"><a href=\"#related-name%EC%9D%B4-%ED%95%84%EC%88%98%EC%9D%B8-%EA%B2%BD%EC%9A%B0%EA%B0%80-%EC%9E%88%EB%8B%A4\" aria-label=\"related name이 필수인 경우가 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Related name이 필수인 경우가 있다.</h1>\n<p>바로 한 클래스에서 서로 다른 두 컬럼(속성)이 같은 테이블(클래스)를 참조하는 경우이다.\n앞서 설명한 상황에서, 지원자가 필수로 신청한 <code class=\"language-text\">occupation</code>외에, 2지망인 <code class=\"language-text\">occupation</code>도 받는다고 가정해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name       <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n    job\t       <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span><span class=\"token string\">'Occupation'</span><span class=\"token punctuation\">,</span> on_delete <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span><span class=\"token punctuation\">]</span> choice_2nd <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span><span class=\"token string\">'Occupation'</span><span class=\"token punctuation\">,</span> on_delete <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">,</span> null <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    created_at <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now_add <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Occupation</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<ul>\n<li>참고로 위와 같은 선언은 애초에 마이그레이션이 되지 않는다. related_name 지정하라는 문구만 뜸.</li>\n</ul>\n</blockquote>\n<p><code class=\"language-text\">User</code>객체에서 <code class=\"language-text\">Occupation</code>객체를 정참조 하는 속성이 두 개이다. 다시 말해 <code class=\"language-text\">developer</code>이라는 <code class=\"language-text\">Occupations</code>객체의 인스턴스를 1지망으로 선택한 지원자와 2지망으로 선택한 지원자가 따로 구별되어있다는 뜻이 된다. 아래 두 인스턴스를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">user1 <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Nick'</span><span class=\"token punctuation\">,</span> job_id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#developer</span>\nuser2 <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Sue'</span><span class=\"token punctuation\">,</span> job_id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> choice_2nd_id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">user1</code>은 1지망은 <code class=\"language-text\">job</code>으로 <code class=\"language-text\">id</code>가 <code class=\"language-text\">1</code>번인 <code class=\"language-text\">developer</code>이다.\n<code class=\"language-text\">user2</code>의 1지망은 <code class=\"language-text\">2</code>번 <code class=\"language-text\">job</code>이고, <strong>2지망</strong>이 <code class=\"language-text\">developer</code>이다.</p>\n<h3 id=\"이-때-related_name이-없다면\" style=\"position:relative;\"><a href=\"#%EC%9D%B4-%EB%95%8C-related_name%EC%9D%B4-%EC%97%86%EB%8B%A4%EB%A9%B4\" aria-label=\"이 때 related_name이 없다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이 때 related_name이 없다면?</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">job1 = Occupation.objects.get(id = 1)\njob1.user_set.all()</code></pre></div>\n<p>의 결과가 생성될 수 있을까?\n❌ 안 됨 ❌</p>\n<blockquote>\n<p><code class=\"language-text\">Occupation</code>객체를 정참조 하고 있는 컬럼이 <code class=\"language-text\">job</code>과<code class=\"language-text\">choice_2nd</code>두 개이므로, 그저 user_set이라는 속성만으로는 자신을 바라보고 있는 두 User 객체 가운데 어떤 속성에 접근해야할 지 알 수가 없기 때문이다. 즉, <code class=\"language-text\">developer</code>을 1지망으로 고른 사람들의 목록(<code class=\"language-text\">Nick</code>)을 가져와야할 지, 2지망으로 고른 사람들의 목록(<code class=\"language-text\">Sue</code>)을 가져와야할 지 알 수가 없기 때문이다.</p>\n</blockquote>\n<h3 id=\"바로-이럴-때-related_name이-필수인-것이다\" style=\"position:relative;\"><a href=\"#%EB%B0%94%EB%A1%9C-%EC%9D%B4%EB%9F%B4-%EB%95%8C-related_name%EC%9D%B4-%ED%95%84%EC%88%98%EC%9D%B8-%EA%B2%83%EC%9D%B4%EB%8B%A4\" aria-label=\"바로 이럴 때 related_name이 필수인 것이다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>바로 이럴 때 related_name이 필수인 것이다.</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n    job\t <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'Occupation'</span><span class=\"token punctuation\">,</span>\n            on_delete    <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">,</span>\n            related_name <span class=\"token operator\">=</span> <span class=\"token string\">'appliers'</span> <span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span> <span class=\"token punctuation\">[</span>Key Point !<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">)</span>\n    choice_2nd  <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">'Occupation'</span><span class=\"token punctuation\">,</span>\n            on_delete    <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">,</span>\n            null         <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n            related_name <span class=\"token operator\">=</span> <span class=\"token string\">'second_appliers'</span>\n        <span class=\"token punctuation\">)</span>\n    created_at\t<span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now_add <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>이제는 <code class=\"language-text\">developer</code>을 1지망으로 지원한 Nick과 2지망으로 지원한 Sue를 구분하여 호출할 수 있다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">job1 <span class=\"token operator\">=</span> Occupation<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\njob1<span class=\"token punctuation\">.</span>appliers<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>QuerySet<span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>Object User Object<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\"># ---> Nick</span>\n\njob1<span class=\"token punctuation\">.</span>second_appliers<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>QuerySet<span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>Object User Object<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token comment\"># ---> Sue</span></code></pre></div>\n<blockquote>\n<h4 id=\"예시에서는-foreign-key만을-다루었는데-manytomany-관계에-있을-때에도-related_name은-같은-원리로-동작한다-헷갈리지-않게-주의하자\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C%EC%97%90%EC%84%9C%EB%8A%94-foreign-key%EB%A7%8C%EC%9D%84-%EB%8B%A4%EB%A3%A8%EC%97%88%EB%8A%94%EB%8D%B0-manytomany-%EA%B4%80%EA%B3%84%EC%97%90-%EC%9E%88%EC%9D%84-%EB%95%8C%EC%97%90%EB%8F%84-related_name%EC%9D%80-%EA%B0%99%EC%9D%80-%EC%9B%90%EB%A6%AC%EB%A1%9C-%EB%8F%99%EC%9E%91%ED%95%9C%EB%8B%A4-%ED%97%B7%EA%B0%88%EB%A6%AC%EC%A7%80-%EC%95%8A%EA%B2%8C-%EC%A3%BC%EC%9D%98%ED%95%98%EC%9E%90\" aria-label=\"예시에서는 foreign key만을 다루었는데 manytomany 관계에 있을 때에도 related_name은 같은 원리로 동작한다 헷갈리지 않게 주의하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시에서는 Foreign Key만을 다루었는데, ManyToMany 관계에 있을 때에도 related_name은 같은 원리로 동작한다. 헷갈리지 않게 주의하자.</h4>\n</blockquote>\n<h1 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며</h1>\n<p>웹의 구조나 서비스가 복잡해질 수록, 클래스 사이의 참조가 많아진다. 일대다는 물론이고, 다대다 관계도 계속 늘어난다. 그럴 때일 수록 related name이 중요하다고 생각한다. 어떻게든 migration만 되면 되지. 라는 생각으로 related_name을 마음대로 설정하다 보면, 나중엔 변수 이름을 아무렇게나 정했을 때만큼이나 의미를 알수 없는 코드를 양산하게 되기 때문이다.</p>\n<p>오늘도 많이 배웠다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%9D%B4-%EB%95%8C-related_name%EC%9D%B4-%EC%97%86%EB%8B%A4%EB%A9%B4\">이 때 related_name이 없다면?</a></li>\n<li><a href=\"#%EB%B0%94%EB%A1%9C-%EC%9D%B4%EB%9F%B4-%EB%95%8C-related_name%EC%9D%B4-%ED%95%84%EC%88%98%EC%9D%B8-%EA%B2%83%EC%9D%B4%EB%8B%A4\">바로 이럴 때 related_name이 필수인 것이다.</a></li>\n</ul>\n</div>","frontmatter":{"date":"June 14, 2020","title":"Django과 Reverse relation과 related_name","categories":"개발블로그","author":"이워크","emoji":"👑"},"fields":{"slug":"/blog-20210614-Django-Related_name/"}},"site":{"siteMetadata":{"siteUrl":"https://www.zoomkoding.com","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/blog-20200405-With-as-Python-Object/","nextSlug":"/blog-20200315-Django-Streaming-Part2/","prevSlug":"/blog-20210614-Django-Related_name/"}},"staticQueryHashes":["1073350324","2938748437"]}