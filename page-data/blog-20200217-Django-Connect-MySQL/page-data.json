{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog-20200217-Django-Connect-MySQL/","result":{"data":{"cur":{"id":"d966eff6-89e9-59de-b7a5-1c82bc703b2a","html":"<p>Django에서는 기본 데이터 베이스로 sqlite3를 제공해준다. setting.py 파일을 보면 sqlite3에 대한 설정을 확인할 수 있다. 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">DATABASES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">'default'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'ENGINE'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.db.backends.sqlite3'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>BASE_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'db.sqlite3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>나는 앞으로 MySQL을 사용할 것이기 때문에, 이 기본 정보를 바꾸고 Django-MySQL 조합을 완성하려 한다.</p>\n<hr>\n<h3 id=\"우분투-mysql-설치\" style=\"position:relative;\"><a href=\"#%EC%9A%B0%EB%B6%84%ED%88%AC-mysql-%EC%84%A4%EC%B9%98\" aria-label=\"우분투 mysql 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>우분투 MySQL 설치</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> -y mysql-server\n$ <span class=\"token function\">sudo</span> mysql_secure_installation\n<span class=\"token punctuation\">[</span>NO<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>최고관리자 password<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>Y:익명 사용자 제거<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>N:외부 로그인 허용<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>Y:테스트 데이터베이스 삭제<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">[</span>Y:privilege table 다시 로드<span class=\"token punctuation\">]</span></code></pre></div>\n<h3 id=\"환경-구성\" style=\"position:relative;\"><a href=\"#%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1\" aria-label=\"환경 구성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>환경 구성</h3>\n<p>django가 설치되어 있는 가상환경을 활성화한 뒤, <code class=\"language-text\">mysqlclient</code>를 설치한다. 이 라이브러리를 활용하여 연동할 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pip <span class=\"token function\">install</span> mysqlclient</code></pre></div>\n<h5 id=\"우분투에서-mysqlclient-설치시-오류가-발생한다면\" style=\"position:relative;\"><a href=\"#%EC%9A%B0%EB%B6%84%ED%88%AC%EC%97%90%EC%84%9C-mysqlclient-%EC%84%A4%EC%B9%98%EC%8B%9C-%EC%98%A4%EB%A5%98%EA%B0%80-%EB%B0%9C%EC%83%9D%ED%95%9C%EB%8B%A4%EB%A9%B4\" aria-label=\"우분투에서 mysqlclient 설치시 오류가 발생한다면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>우분투에서 mysqlclient 설치시 오류가 발생한다면,</h5>\n<p style=\"background-color:pink; padding:5px\">Command \"python setup.py egg_info\" failed with error code 1 in /tmp/pip-install-zbw18e9_/mysqlclient/  </p>\n<p>이런 에러.<br>\n또는,</p>\n<p style=\"background-color:pink; padding:5px\">/bin/sh: 1: mysql_config: not found  </p>\n<p>이런 에러.<br>\n이때,</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> libmysqlclient-dev</code></pre></div>\n<p>다시</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> mysqlclient</code></pre></div>\n<h3 id=\"mysql에-데이터베이스-생성\" style=\"position:relative;\"><a href=\"#mysql%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%83%9D%EC%84%B1\" aria-label=\"mysql에 데이터베이스 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MySQL에 데이터베이스 생성</h3>\n<p>현재 프로젝트에서 이용할 데이터베이스를 MySQL 내부에 만들어주자. starbucks 라는 데이터 베이스를 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> starbucks <span class=\"token keyword\">character</span> <span class=\"token keyword\">set</span> utf8mb4 <span class=\"token keyword\">collate</span> utf8mb4_general_ci<span class=\"token punctuation\">;</span>\nQuery OK<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token keyword\">row</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.01</span> sec<span class=\"token punctuation\">)</span></code></pre></div>\n<p>character set utf8mb4 - 한글 사용 활성화</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">use</span> starbucks\n<span class=\"token keyword\">Database</span> changed\nmysql<span class=\"token operator\">></span> <span class=\"token keyword\">show</span> <span class=\"token keyword\">tables</span><span class=\"token punctuation\">;</span>\nEmpty <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span></code></pre></div>\n<p>지금은 아무 테이블도 없지만, 앞으로 이것 저것 넣으면 된다.</p>\n<h5 id=\"-데이터베이스-삭제하려면\" style=\"position:relative;\"><a href=\"#-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%82%AD%EC%A0%9C%ED%95%98%EB%A0%A4%EB%A9%B4\" aria-label=\" 데이터베이스 삭제하려면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❔ 데이터베이스 삭제하려면</h5>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">DROP DATABASE &lt;database_name></code></pre></div>\n<h3 id=\"django-mysql-연동\" style=\"position:relative;\"><a href=\"#django-mysql-%EC%97%B0%EB%8F%99\" aria-label=\"django mysql 연동 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django-MySQL 연동</h3>\n<p>여태 settings.py에 모든 정보를 몰아서 저장했지만, 지금부터는 my_settings.py라는 새로운 파일에 민감한 정보들을 따로 저장해두고, settings.py에서 import 해서 사용할 것이다.</p>\n<blockquote>\n<p class=\"quote\" style=\"max-width: 100%; padding:10px; border-left:solid 3px gray; text-align:left\"> my_settings.py 파일은 외부와 공유할 일이 없는 정보이기 때문에 .gitignore이라는 숨김 파일에 이름을 등록하여 github에 업로드 되지 않도록 만들어야 한다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> my_settings.py</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">DATABASES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'default'</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'ENGINE'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'django.db.backends.mysql'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'NAME'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'starbucks'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'USER'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'PASSWORD'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'HOST'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'PORT'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3306'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">my_settings.py</code>파일이 완성되었다. 그럼 진짜 <code class=\"language-text\">setting.py</code>파일에서 import하러 가자!</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> settings.py</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> my_settings\n\nDATABASES <span class=\"token operator\">=</span> my_settings<span class=\"token punctuation\">.</span>DATABASES</code></pre></div>\n<p>모든 설정을 수정하였다면 데이터베이스에 테이블을 만들어줘야한다. <code class=\"language-text\">./manage.py migrate</code></p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">use</span> starbucks\nmysql<span class=\"token operator\">></span> <span class=\"token keyword\">show</span> <span class=\"token keyword\">tables</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">장고_어쩌구</code> 세 테이블과, 내가 starbucks_menu.models에 만들어 둔 클래스에 해당하는 표들이 보인다.</p>\n<hr>\n<p>이제 쓰면 된다.</p>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%9A%B0%EB%B6%84%ED%88%AC-mysql-%EC%84%A4%EC%B9%98\">우분투 MySQL 설치</a></li>\n<li>\n<p><a href=\"#%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1\">환경 구성</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%EC%9A%B0%EB%B6%84%ED%88%AC%EC%97%90%EC%84%9C-mysqlclient-%EC%84%A4%EC%B9%98%EC%8B%9C-%EC%98%A4%EB%A5%98%EA%B0%80-%EB%B0%9C%EC%83%9D%ED%95%9C%EB%8B%A4%EB%A9%B4\">우분투에서 mysqlclient 설치시 오류가 발생한다면,</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#mysql%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%83%9D%EC%84%B1\">MySQL에 데이터베이스 생성</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%82%AD%EC%A0%9C%ED%95%98%EB%A0%A4%EB%A9%B4\">❔ 데이터베이스 삭제하려면</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#django-mysql-%EC%97%B0%EB%8F%99\">Django-MySQL 연동</a></li>\n</ul>\n</div>","excerpt":"Django에서는 기본 데이터 베이스로 sqlite3를 제공해준다. setting.py 파일을 보면 sqlite3에 대한 설정을 확인할 수 있다. 아래와 같다. 나는 앞으로 MySQL을 사용할 것이기 때문에, 이 기본 정보를 바꾸고 Django-MySQL 조합을 완성하려 한다. 우분투 MySQL 설치 환경 구성 django가 설치되어 있는 가상환경을 활성화한 뒤, 를 설치한다. 이 라이브러리를 활용하여 연동할 것이다. 우분투에서 mysqlclient 설치시 오류가 발생한다면, 이런 에러. 또는, 이런 에러. 이때, 다시 MySQL에 데이터베이스 생성 현재 프로젝트에서 이용할 데이터베이스를 MySQL 내부에 만들어주자. starbucks 라는 데이터 베이스를 생성한다. character set utf8mb4 - 한글 사용 활성화 지금은 아무 테이블도 없지만, 앞으로 이것 저것 넣으면 된다. ❔ 데이터베이스 삭제하려면 Django-MySQL 연동 여태 settings.py에 모든 정보…","frontmatter":{"date":"February 17, 2020","title":"Django에 MySQL 연결하여 데이터 저장하기","categories":"개발블로그","author":"이소헌","emoji":"👑"},"fields":{"slug":"/blog-20200217-Django-Connect-MySQL/"}},"next":null,"prev":{"id":"e56d1a5e-b653-5b22-8f18-06573b9cb420","html":"<h1 id=\"중간부터-스트리밍\" style=\"position:relative;\"><a href=\"#%EC%A4%91%EA%B0%84%EB%B6%80%ED%84%B0-%EC%8A%A4%ED%8A%B8%EB%A6%AC%EB%B0%8D\" aria-label=\"중간부터 스트리밍 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>중간부터 스트리밍</h1>\n<p>이전에 작성했던 스트리밍 코드는 아래와 같다.</p>\n<h3 id=\"viewspy\" style=\"position:relative;\"><a href=\"#viewspy\" aria-label=\"viewspy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>views.py</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StreamTextView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            track_id    <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'track_id'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n            track       <span class=\"token operator\">=</span> Track<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> track_id<span class=\"token punctuation\">)</span>\n            music_url   <span class=\"token operator\">=</span> track<span class=\"token punctuation\">.</span>music_url\n            stream      <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>iteration<span class=\"token punctuation\">(</span>music_url<span class=\"token punctuation\">)</span>\n            response    <span class=\"token operator\">=</span> StreamingHttpResponse<span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> content_type <span class=\"token operator\">=</span> <span class=\"token string\">'text/event-stream'</span><span class=\"token punctuation\">)</span>\n            response<span class=\"token punctuation\">[</span><span class=\"token string\">'Cache-Control'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'no-cache'</span>\n\n            <span class=\"token keyword\">return</span> response\n        <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> identifier<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>indentifier<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">iteration</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> music_url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>music_url<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb+'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n                c <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> c<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">yield</span> c\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">break</span></code></pre></div>\n<p>프론트에 fetch url 을 주고, 그 URL이 호출될 때 위 클래스가 실행되면 노래가 저절로 재생되었다. 그러나 지금 코드로는 노래를 오로지 처음부터만 재생할 수 있다. 중간부터 재생하려고 재생막대 그 어딘가를 누르게되면, 다시 fetch url을 호출하는 과정이 되기 때문에 다시 노래가 처음부터 시작된다.</p>\n<p><strong>행복하지 않다.</strong></p>\n<h2 id=\"첫번째-시도\" style=\"position:relative;\"><a href=\"#%EC%B2%AB%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84\" aria-label=\"첫번째 시도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>첫번째 시도,</h2>\n<p>파일을 읽어오는 부분인 <code class=\"language-text\">c = f.read()</code> 부분에 어디서 읽을지 시작부분을 넣어주는 방법이다. <code class=\"language-text\">c = f.read(sample_rate * second)</code> 의 형태이다. 여기서 sample rate란 음악 파일에서 초당 읽어오는 데이터의 양이다. 따라서 시작하고자 하는 위치를 초(second)의 형태로 곱해주면, 파일에서 내가 시작하고자 하는 부분부터 읽어올 수 있기 때문이다.<br>\nsample rate는 음악별로 다르지만, jamendo 홈페이지에서 다운받은 무료 음원의 sample rate은 거의 모두 22050이었다.</p>\n<h3 id=\"결과-1\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B3%BC-1\" aria-label=\"결과 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결과 1</h3>\n<p>반만 성공함. 프론트엔드에서 지정한 위치를 따로 설정해서 받아오는 것은 작동하지 않았고, second = 70 (초)로 설정해두면, 매번 70초의 위치에서 노래가 시작되기만 했다 ㅋㅋㅋ</p>\n<h2 id=\"두번째-시도\" style=\"position:relative;\"><a href=\"#%EB%91%90%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84\" aria-label=\"두번째 시도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>두번째 시도,</h2>\n<p>위에 입력한 코드의 <code class=\"language-text\">response</code>에 다른 attribute를 추가해주었다.</p>\n<ol>\n<li>response[‘Accept-Ranges’] = ‘bytes’</li>\n<li>response[‘Content-Length’] = len(open(‘media/‘+music_file, ‘rb’).read())</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MusicStreamingView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        track_id    <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'track_id'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n        start_sec   <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>GET<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'start_sec'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> track_id<span class=\"token punctuation\">:</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>track_id<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>Track<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>track_id<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'INVALID_KEY'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n            track       <span class=\"token operator\">=</span> Track<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> track_id<span class=\"token punctuation\">)</span>\n            music_file  <span class=\"token operator\">=</span> track<span class=\"token punctuation\">.</span>music_url\n            stream      <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>iteration<span class=\"token punctuation\">(</span><span class=\"token string\">'media/'</span><span class=\"token operator\">+</span>music_file<span class=\"token punctuation\">)</span>\n            response    <span class=\"token operator\">=</span> StreamingHttpResponse<span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\n            response<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span>        <span class=\"token operator\">=</span> <span class=\"token string\">'audio/mpeg'</span>\n            response<span class=\"token punctuation\">[</span><span class=\"token string\">'Accept-Ranges'</span><span class=\"token punctuation\">]</span>       <span class=\"token operator\">=</span> <span class=\"token string\">'bytes'</span>\n            response<span class=\"token punctuation\">[</span><span class=\"token string\">'Cache-Control'</span><span class=\"token punctuation\">]</span>       <span class=\"token operator\">=</span> <span class=\"token string\">'no-cache'</span>\n            response<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Length'</span><span class=\"token punctuation\">]</span>      <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'media/'</span><span class=\"token operator\">+</span>music_file<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            response<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Disposition'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'filename = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>music_file<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span>\n\n            <span class=\"token keyword\">return</span> response\n\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'message'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'INVALID_KEYWORD'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">iteration</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> file_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb+'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n           <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n                content <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> content<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">yield</span> content\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">break</span></code></pre></div>\n<h3 id=\"결과-2\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B3%BC-2\" aria-label=\"결과 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결과 2</h3>\n<p>성공성공~</p>\n<h1 id=\"음악-파일-unit-test\" style=\"position:relative;\"><a href=\"#%EC%9D%8C%EC%95%85-%ED%8C%8C%EC%9D%BC-unit-test\" aria-label=\"음악 파일 unit test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>음악 파일 unit test</h1>\n<p>요즘 개발과 동시에 유닛테스트를 진행하고 있다. 일반 <code class=\"language-text\">HttpResponse</code> 나 <code class=\"language-text\">JssonResponse</code>와는 달리 Streaming music은 어떻게 unit test를 할까?</p>\n<p>우선은 지정해둔 내부 속성들이 다 잘 전달되었는지로 확인하기로 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">response<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Disposition'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'filename  = </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>music_file<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span></code></pre></div>\n<p>이렇게 추가해두고, test.py 파일은 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StreamingTest</span><span class=\"token punctuation\">(</span>TestCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n     <span class=\"token keyword\">def</span> <span class=\"token function\">test_streaming_get_success</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n         client <span class=\"token operator\">=</span> Client<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n         response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'/music/track?track_id=1'</span><span class=\"token punctuation\">)</span>\n         self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>\n             <span class=\"token string\">'Content-Disposition'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n             <span class=\"token string\">\"filename = DR_GROOVE_GANG_-_A_l_ancienne.mp3\"</span>\n         <span class=\"token punctuation\">)</span>\n         self<span class=\"token punctuation\">.</span>assertEqual<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status_code<span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>우선 여기까지로 타협 !</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<ul>\n<li><a href=\"#viewspy\">views.py</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B2%AB%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84\">첫번째 시도,</a></p>\n<ul>\n<li><a href=\"#%EA%B2%B0%EA%B3%BC-1\">결과 1</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%91%90%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84\">두번째 시도,</a></p>\n<ul>\n<li><a href=\"#%EA%B2%B0%EA%B3%BC-2\">결과 2</a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"March 15, 2020","title":"Django로 스트리밍 하기 part2 - 중간 재생과 Unit test","categories":"개발블로그","author":"이소헌","emoji":"👑"},"fields":{"slug":"/blog-20200315-Django-Streaming-Part2/"}},"site":{"siteMetadata":{"siteUrl":"https://www.zoomkoding.com","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/blog-20200217-Django-Connect-MySQL/","nextSlug":"","prevSlug":"/blog-20200315-Django-Streaming-Part2/"}},"staticQueryHashes":["1073350324","2938748437"]}